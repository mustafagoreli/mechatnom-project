
MECHATNOM_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000384c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  080039d4  080039d4  000139d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003b30  08003b30  00013b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003b38  08003b38  00013b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003b3c  08003b3c  00013b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001dc  20000000  08003b40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
  8 .bss          000000fc  200001dc  200001dc  000201dc  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200002d8  200002d8  000201dc  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000b264  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000019ed  00000000  00000000  0002b470  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000007c8  00000000  00000000  0002ce60  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000710  00000000  00000000  0002d628  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00004698  00000000  00000000  0002dd38  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002b00  00000000  00000000  000323d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00034ed0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000218c  00000000  00000000  00034f4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001dc 	.word	0x200001dc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080039bc 	.word	0x080039bc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001e0 	.word	0x200001e0
 80001c4:	080039bc 	.word	0x080039bc

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <__aeabi_uldivmod>:
 80001dc:	b953      	cbnz	r3, 80001f4 <__aeabi_uldivmod+0x18>
 80001de:	b94a      	cbnz	r2, 80001f4 <__aeabi_uldivmod+0x18>
 80001e0:	2900      	cmp	r1, #0
 80001e2:	bf08      	it	eq
 80001e4:	2800      	cmpeq	r0, #0
 80001e6:	bf1c      	itt	ne
 80001e8:	f04f 31ff 	movne.w	r1, #4294967295
 80001ec:	f04f 30ff 	movne.w	r0, #4294967295
 80001f0:	f000 b97a 	b.w	80004e8 <__aeabi_idiv0>
 80001f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001fc:	f000 f806 	bl	800020c <__udivmoddi4>
 8000200:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000204:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000208:	b004      	add	sp, #16
 800020a:	4770      	bx	lr

0800020c <__udivmoddi4>:
 800020c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000210:	468c      	mov	ip, r1
 8000212:	460d      	mov	r5, r1
 8000214:	4604      	mov	r4, r0
 8000216:	9e08      	ldr	r6, [sp, #32]
 8000218:	2b00      	cmp	r3, #0
 800021a:	d151      	bne.n	80002c0 <__udivmoddi4+0xb4>
 800021c:	428a      	cmp	r2, r1
 800021e:	4617      	mov	r7, r2
 8000220:	d96d      	bls.n	80002fe <__udivmoddi4+0xf2>
 8000222:	fab2 fe82 	clz	lr, r2
 8000226:	f1be 0f00 	cmp.w	lr, #0
 800022a:	d00b      	beq.n	8000244 <__udivmoddi4+0x38>
 800022c:	f1ce 0c20 	rsb	ip, lr, #32
 8000230:	fa01 f50e 	lsl.w	r5, r1, lr
 8000234:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000238:	fa02 f70e 	lsl.w	r7, r2, lr
 800023c:	ea4c 0c05 	orr.w	ip, ip, r5
 8000240:	fa00 f40e 	lsl.w	r4, r0, lr
 8000244:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000248:	0c25      	lsrs	r5, r4, #16
 800024a:	fbbc f8fa 	udiv	r8, ip, sl
 800024e:	fa1f f987 	uxth.w	r9, r7
 8000252:	fb0a cc18 	mls	ip, sl, r8, ip
 8000256:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800025a:	fb08 f309 	mul.w	r3, r8, r9
 800025e:	42ab      	cmp	r3, r5
 8000260:	d90a      	bls.n	8000278 <__udivmoddi4+0x6c>
 8000262:	19ed      	adds	r5, r5, r7
 8000264:	f108 32ff 	add.w	r2, r8, #4294967295
 8000268:	f080 8123 	bcs.w	80004b2 <__udivmoddi4+0x2a6>
 800026c:	42ab      	cmp	r3, r5
 800026e:	f240 8120 	bls.w	80004b2 <__udivmoddi4+0x2a6>
 8000272:	f1a8 0802 	sub.w	r8, r8, #2
 8000276:	443d      	add	r5, r7
 8000278:	1aed      	subs	r5, r5, r3
 800027a:	b2a4      	uxth	r4, r4
 800027c:	fbb5 f0fa 	udiv	r0, r5, sl
 8000280:	fb0a 5510 	mls	r5, sl, r0, r5
 8000284:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000288:	fb00 f909 	mul.w	r9, r0, r9
 800028c:	45a1      	cmp	r9, r4
 800028e:	d909      	bls.n	80002a4 <__udivmoddi4+0x98>
 8000290:	19e4      	adds	r4, r4, r7
 8000292:	f100 33ff 	add.w	r3, r0, #4294967295
 8000296:	f080 810a 	bcs.w	80004ae <__udivmoddi4+0x2a2>
 800029a:	45a1      	cmp	r9, r4
 800029c:	f240 8107 	bls.w	80004ae <__udivmoddi4+0x2a2>
 80002a0:	3802      	subs	r0, #2
 80002a2:	443c      	add	r4, r7
 80002a4:	eba4 0409 	sub.w	r4, r4, r9
 80002a8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002ac:	2100      	movs	r1, #0
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	d061      	beq.n	8000376 <__udivmoddi4+0x16a>
 80002b2:	fa24 f40e 	lsr.w	r4, r4, lr
 80002b6:	2300      	movs	r3, #0
 80002b8:	6034      	str	r4, [r6, #0]
 80002ba:	6073      	str	r3, [r6, #4]
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d907      	bls.n	80002d4 <__udivmoddi4+0xc8>
 80002c4:	2e00      	cmp	r6, #0
 80002c6:	d054      	beq.n	8000372 <__udivmoddi4+0x166>
 80002c8:	2100      	movs	r1, #0
 80002ca:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ce:	4608      	mov	r0, r1
 80002d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d4:	fab3 f183 	clz	r1, r3
 80002d8:	2900      	cmp	r1, #0
 80002da:	f040 808e 	bne.w	80003fa <__udivmoddi4+0x1ee>
 80002de:	42ab      	cmp	r3, r5
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xdc>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 80fa 	bhi.w	80004dc <__udivmoddi4+0x2d0>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb65 0503 	sbc.w	r5, r5, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	46ac      	mov	ip, r5
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d03f      	beq.n	8000376 <__udivmoddi4+0x16a>
 80002f6:	e886 1010 	stmia.w	r6, {r4, ip}
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	b912      	cbnz	r2, 8000306 <__udivmoddi4+0xfa>
 8000300:	2701      	movs	r7, #1
 8000302:	fbb7 f7f2 	udiv	r7, r7, r2
 8000306:	fab7 fe87 	clz	lr, r7
 800030a:	f1be 0f00 	cmp.w	lr, #0
 800030e:	d134      	bne.n	800037a <__udivmoddi4+0x16e>
 8000310:	1beb      	subs	r3, r5, r7
 8000312:	0c3a      	lsrs	r2, r7, #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	2101      	movs	r1, #1
 800031a:	fbb3 f8f2 	udiv	r8, r3, r2
 800031e:	0c25      	lsrs	r5, r4, #16
 8000320:	fb02 3318 	mls	r3, r2, r8, r3
 8000324:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000328:	fb0c f308 	mul.w	r3, ip, r8
 800032c:	42ab      	cmp	r3, r5
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x134>
 8000330:	19ed      	adds	r5, r5, r7
 8000332:	f108 30ff 	add.w	r0, r8, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x132>
 8000338:	42ab      	cmp	r3, r5
 800033a:	f200 80d1 	bhi.w	80004e0 <__udivmoddi4+0x2d4>
 800033e:	4680      	mov	r8, r0
 8000340:	1aed      	subs	r5, r5, r3
 8000342:	b2a3      	uxth	r3, r4
 8000344:	fbb5 f0f2 	udiv	r0, r5, r2
 8000348:	fb02 5510 	mls	r5, r2, r0, r5
 800034c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000350:	fb0c fc00 	mul.w	ip, ip, r0
 8000354:	45a4      	cmp	ip, r4
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x15c>
 8000358:	19e4      	adds	r4, r4, r7
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x15a>
 8000360:	45a4      	cmp	ip, r4
 8000362:	f200 80b8 	bhi.w	80004d6 <__udivmoddi4+0x2ca>
 8000366:	4618      	mov	r0, r3
 8000368:	eba4 040c 	sub.w	r4, r4, ip
 800036c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000370:	e79d      	b.n	80002ae <__udivmoddi4+0xa2>
 8000372:	4631      	mov	r1, r6
 8000374:	4630      	mov	r0, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	f1ce 0420 	rsb	r4, lr, #32
 800037e:	fa05 f30e 	lsl.w	r3, r5, lr
 8000382:	fa07 f70e 	lsl.w	r7, r7, lr
 8000386:	fa20 f804 	lsr.w	r8, r0, r4
 800038a:	0c3a      	lsrs	r2, r7, #16
 800038c:	fa25 f404 	lsr.w	r4, r5, r4
 8000390:	ea48 0803 	orr.w	r8, r8, r3
 8000394:	fbb4 f1f2 	udiv	r1, r4, r2
 8000398:	ea4f 4518 	mov.w	r5, r8, lsr #16
 800039c:	fb02 4411 	mls	r4, r2, r1, r4
 80003a0:	fa1f fc87 	uxth.w	ip, r7
 80003a4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003a8:	fb01 f30c 	mul.w	r3, r1, ip
 80003ac:	42ab      	cmp	r3, r5
 80003ae:	fa00 f40e 	lsl.w	r4, r0, lr
 80003b2:	d909      	bls.n	80003c8 <__udivmoddi4+0x1bc>
 80003b4:	19ed      	adds	r5, r5, r7
 80003b6:	f101 30ff 	add.w	r0, r1, #4294967295
 80003ba:	f080 808a 	bcs.w	80004d2 <__udivmoddi4+0x2c6>
 80003be:	42ab      	cmp	r3, r5
 80003c0:	f240 8087 	bls.w	80004d2 <__udivmoddi4+0x2c6>
 80003c4:	3902      	subs	r1, #2
 80003c6:	443d      	add	r5, r7
 80003c8:	1aeb      	subs	r3, r5, r3
 80003ca:	fa1f f588 	uxth.w	r5, r8
 80003ce:	fbb3 f0f2 	udiv	r0, r3, r2
 80003d2:	fb02 3310 	mls	r3, r2, r0, r3
 80003d6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003da:	fb00 f30c 	mul.w	r3, r0, ip
 80003de:	42ab      	cmp	r3, r5
 80003e0:	d907      	bls.n	80003f2 <__udivmoddi4+0x1e6>
 80003e2:	19ed      	adds	r5, r5, r7
 80003e4:	f100 38ff 	add.w	r8, r0, #4294967295
 80003e8:	d26f      	bcs.n	80004ca <__udivmoddi4+0x2be>
 80003ea:	42ab      	cmp	r3, r5
 80003ec:	d96d      	bls.n	80004ca <__udivmoddi4+0x2be>
 80003ee:	3802      	subs	r0, #2
 80003f0:	443d      	add	r5, r7
 80003f2:	1aeb      	subs	r3, r5, r3
 80003f4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f8:	e78f      	b.n	800031a <__udivmoddi4+0x10e>
 80003fa:	f1c1 0720 	rsb	r7, r1, #32
 80003fe:	fa22 f807 	lsr.w	r8, r2, r7
 8000402:	408b      	lsls	r3, r1
 8000404:	fa05 f401 	lsl.w	r4, r5, r1
 8000408:	ea48 0303 	orr.w	r3, r8, r3
 800040c:	fa20 fe07 	lsr.w	lr, r0, r7
 8000410:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000414:	40fd      	lsrs	r5, r7
 8000416:	ea4e 0e04 	orr.w	lr, lr, r4
 800041a:	fbb5 f9fc 	udiv	r9, r5, ip
 800041e:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000422:	fb0c 5519 	mls	r5, ip, r9, r5
 8000426:	fa1f f883 	uxth.w	r8, r3
 800042a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800042e:	fb09 f408 	mul.w	r4, r9, r8
 8000432:	42ac      	cmp	r4, r5
 8000434:	fa02 f201 	lsl.w	r2, r2, r1
 8000438:	fa00 fa01 	lsl.w	sl, r0, r1
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x244>
 800043e:	18ed      	adds	r5, r5, r3
 8000440:	f109 30ff 	add.w	r0, r9, #4294967295
 8000444:	d243      	bcs.n	80004ce <__udivmoddi4+0x2c2>
 8000446:	42ac      	cmp	r4, r5
 8000448:	d941      	bls.n	80004ce <__udivmoddi4+0x2c2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	441d      	add	r5, r3
 8000450:	1b2d      	subs	r5, r5, r4
 8000452:	fa1f fe8e 	uxth.w	lr, lr
 8000456:	fbb5 f0fc 	udiv	r0, r5, ip
 800045a:	fb0c 5510 	mls	r5, ip, r0, r5
 800045e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000462:	fb00 f808 	mul.w	r8, r0, r8
 8000466:	45a0      	cmp	r8, r4
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x26e>
 800046a:	18e4      	adds	r4, r4, r3
 800046c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000470:	d229      	bcs.n	80004c6 <__udivmoddi4+0x2ba>
 8000472:	45a0      	cmp	r8, r4
 8000474:	d927      	bls.n	80004c6 <__udivmoddi4+0x2ba>
 8000476:	3802      	subs	r0, #2
 8000478:	441c      	add	r4, r3
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	eba4 0408 	sub.w	r4, r4, r8
 8000482:	fba0 8902 	umull	r8, r9, r0, r2
 8000486:	454c      	cmp	r4, r9
 8000488:	46c6      	mov	lr, r8
 800048a:	464d      	mov	r5, r9
 800048c:	d315      	bcc.n	80004ba <__udivmoddi4+0x2ae>
 800048e:	d012      	beq.n	80004b6 <__udivmoddi4+0x2aa>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x29c>
 8000492:	ebba 030e 	subs.w	r3, sl, lr
 8000496:	eb64 0405 	sbc.w	r4, r4, r5
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40cb      	lsrs	r3, r1
 80004a0:	431f      	orrs	r7, r3
 80004a2:	40cc      	lsrs	r4, r1
 80004a4:	6037      	str	r7, [r6, #0]
 80004a6:	6074      	str	r4, [r6, #4]
 80004a8:	2100      	movs	r1, #0
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	4618      	mov	r0, r3
 80004b0:	e6f8      	b.n	80002a4 <__udivmoddi4+0x98>
 80004b2:	4690      	mov	r8, r2
 80004b4:	e6e0      	b.n	8000278 <__udivmoddi4+0x6c>
 80004b6:	45c2      	cmp	sl, r8
 80004b8:	d2ea      	bcs.n	8000490 <__udivmoddi4+0x284>
 80004ba:	ebb8 0e02 	subs.w	lr, r8, r2
 80004be:	eb69 0503 	sbc.w	r5, r9, r3
 80004c2:	3801      	subs	r0, #1
 80004c4:	e7e4      	b.n	8000490 <__udivmoddi4+0x284>
 80004c6:	4628      	mov	r0, r5
 80004c8:	e7d7      	b.n	800047a <__udivmoddi4+0x26e>
 80004ca:	4640      	mov	r0, r8
 80004cc:	e791      	b.n	80003f2 <__udivmoddi4+0x1e6>
 80004ce:	4681      	mov	r9, r0
 80004d0:	e7be      	b.n	8000450 <__udivmoddi4+0x244>
 80004d2:	4601      	mov	r1, r0
 80004d4:	e778      	b.n	80003c8 <__udivmoddi4+0x1bc>
 80004d6:	3802      	subs	r0, #2
 80004d8:	443c      	add	r4, r7
 80004da:	e745      	b.n	8000368 <__udivmoddi4+0x15c>
 80004dc:	4608      	mov	r0, r1
 80004de:	e708      	b.n	80002f2 <__udivmoddi4+0xe6>
 80004e0:	f1a8 0802 	sub.w	r8, r8, #2
 80004e4:	443d      	add	r5, r7
 80004e6:	e72b      	b.n	8000340 <__udivmoddi4+0x134>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004f2:	2300      	movs	r3, #0
 80004f4:	607b      	str	r3, [r7, #4]
 80004f6:	4a0c      	ldr	r2, [pc, #48]	; (8000528 <MX_DMA_Init+0x3c>)
 80004f8:	4b0b      	ldr	r3, [pc, #44]	; (8000528 <MX_DMA_Init+0x3c>)
 80004fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000500:	6313      	str	r3, [r2, #48]	; 0x30
 8000502:	4b09      	ldr	r3, [pc, #36]	; (8000528 <MX_DMA_Init+0x3c>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800050a:	607b      	str	r3, [r7, #4]
 800050c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800050e:	2200      	movs	r2, #0
 8000510:	2100      	movs	r1, #0
 8000512:	200c      	movs	r0, #12
 8000514:	f000 fc97 	bl	8000e46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000518:	200c      	movs	r0, #12
 800051a:	f000 fcb0 	bl	8000e7e <HAL_NVIC_EnableIRQ>

}
 800051e:	bf00      	nop
 8000520:	3708      	adds	r7, #8
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	40023800 	.word	0x40023800

0800052c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b088      	sub	sp, #32
 8000530:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000532:	f107 030c 	add.w	r3, r7, #12
 8000536:	2200      	movs	r2, #0
 8000538:	601a      	str	r2, [r3, #0]
 800053a:	605a      	str	r2, [r3, #4]
 800053c:	609a      	str	r2, [r3, #8]
 800053e:	60da      	str	r2, [r3, #12]
 8000540:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000542:	2300      	movs	r3, #0
 8000544:	60bb      	str	r3, [r7, #8]
 8000546:	4a19      	ldr	r2, [pc, #100]	; (80005ac <MX_GPIO_Init+0x80>)
 8000548:	4b18      	ldr	r3, [pc, #96]	; (80005ac <MX_GPIO_Init+0x80>)
 800054a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054c:	f043 0302 	orr.w	r3, r3, #2
 8000550:	6313      	str	r3, [r2, #48]	; 0x30
 8000552:	4b16      	ldr	r3, [pc, #88]	; (80005ac <MX_GPIO_Init+0x80>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	f003 0302 	and.w	r3, r3, #2
 800055a:	60bb      	str	r3, [r7, #8]
 800055c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800055e:	2300      	movs	r3, #0
 8000560:	607b      	str	r3, [r7, #4]
 8000562:	4a12      	ldr	r2, [pc, #72]	; (80005ac <MX_GPIO_Init+0x80>)
 8000564:	4b11      	ldr	r3, [pc, #68]	; (80005ac <MX_GPIO_Init+0x80>)
 8000566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000568:	f043 0308 	orr.w	r3, r3, #8
 800056c:	6313      	str	r3, [r2, #48]	; 0x30
 800056e:	4b0f      	ldr	r3, [pc, #60]	; (80005ac <MX_GPIO_Init+0x80>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000572:	f003 0308 	and.w	r3, r3, #8
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800057a:	2200      	movs	r2, #0
 800057c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000580:	480b      	ldr	r0, [pc, #44]	; (80005b0 <MX_GPIO_Init+0x84>)
 8000582:	f001 fa4d 	bl	8001a20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000586:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800058a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800058c:	2301      	movs	r3, #1
 800058e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000590:	2300      	movs	r3, #0
 8000592:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000594:	2300      	movs	r3, #0
 8000596:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000598:	f107 030c 	add.w	r3, r7, #12
 800059c:	4619      	mov	r1, r3
 800059e:	4804      	ldr	r0, [pc, #16]	; (80005b0 <MX_GPIO_Init+0x84>)
 80005a0:	f001 f8a4 	bl	80016ec <HAL_GPIO_Init>

}
 80005a4:	bf00      	nop
 80005a6:	3720      	adds	r7, #32
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	40023800 	.word	0x40023800
 80005b0:	40020c00 	.word	0x40020c00

080005b4 <HAL_UARTEx_RxEventCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	460b      	mov	r3, r1
 80005be:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART3) {
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a1a      	ldr	r2, [pc, #104]	; (8000630 <HAL_UARTEx_RxEventCallback+0x7c>)
 80005c6:	4293      	cmp	r3, r2
 80005c8:	d12d      	bne.n	8000626 <HAL_UARTEx_RxEventCallback+0x72>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart3, stUART3.buffer, RXBUFF_SIZE);
 80005ca:	2214      	movs	r2, #20
 80005cc:	4919      	ldr	r1, [pc, #100]	; (8000634 <HAL_UARTEx_RxEventCallback+0x80>)
 80005ce:	481a      	ldr	r0, [pc, #104]	; (8000638 <HAL_UARTEx_RxEventCallback+0x84>)
 80005d0:	f001 ff66 	bl	80024a0 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 80005d4:	4b19      	ldr	r3, [pc, #100]	; (800063c <HAL_UARTEx_RxEventCallback+0x88>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a18      	ldr	r2, [pc, #96]	; (800063c <HAL_UARTEx_RxEventCallback+0x88>)
 80005da:	6812      	ldr	r2, [r2, #0]
 80005dc:	6812      	ldr	r2, [r2, #0]
 80005de:	f022 0208 	bic.w	r2, r2, #8
 80005e2:	601a      	str	r2, [r3, #0]
		stUART3.size = Size;
 80005e4:	887b      	ldrh	r3, [r7, #2]
 80005e6:	b2da      	uxtb	r2, r3
 80005e8:	4b12      	ldr	r3, [pc, #72]	; (8000634 <HAL_UARTEx_RxEventCallback+0x80>)
 80005ea:	751a      	strb	r2, [r3, #20]
		for (int i = Size; i < RXBUFF_SIZE; i++) {
 80005ec:	887b      	ldrh	r3, [r7, #2]
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	e007      	b.n	8000602 <HAL_UARTEx_RxEventCallback+0x4e>
			stUART3.buffer[i] = 0;
 80005f2:	4a10      	ldr	r2, [pc, #64]	; (8000634 <HAL_UARTEx_RxEventCallback+0x80>)
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	4413      	add	r3, r2
 80005f8:	2200      	movs	r2, #0
 80005fa:	701a      	strb	r2, [r3, #0]
		for (int i = Size; i < RXBUFF_SIZE; i++) {
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	3301      	adds	r3, #1
 8000600:	60fb      	str	r3, [r7, #12]
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	2b13      	cmp	r3, #19
 8000606:	ddf4      	ble.n	80005f2 <HAL_UARTEx_RxEventCallback+0x3e>
		}
		stUART3.update = true;
 8000608:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <HAL_UARTEx_RxEventCallback+0x80>)
 800060a:	2201      	movs	r2, #1
 800060c:	755a      	strb	r2, [r3, #21]
		if (stUART3.echo == true) {
 800060e:	4b09      	ldr	r3, [pc, #36]	; (8000634 <HAL_UARTEx_RxEventCallback+0x80>)
 8000610:	7d9b      	ldrb	r3, [r3, #22]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d007      	beq.n	8000626 <HAL_UARTEx_RxEventCallback+0x72>
			HAL_UART_Transmit(&huart3, (uint8_t *) stUART3.buffer, stUART3.size,
 8000616:	4b07      	ldr	r3, [pc, #28]	; (8000634 <HAL_UARTEx_RxEventCallback+0x80>)
 8000618:	7d1b      	ldrb	r3, [r3, #20]
 800061a:	b29a      	uxth	r2, r3
 800061c:	23c8      	movs	r3, #200	; 0xc8
 800061e:	4905      	ldr	r1, [pc, #20]	; (8000634 <HAL_UARTEx_RxEventCallback+0x80>)
 8000620:	4805      	ldr	r0, [pc, #20]	; (8000638 <HAL_UARTEx_RxEventCallback+0x84>)
 8000622:	f001 feac 	bl	800237e <HAL_UART_Transmit>
					200);
		}
	}
}
 8000626:	bf00      	nop
 8000628:	3710      	adds	r7, #16
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40004800 	.word	0x40004800
 8000634:	20000204 	.word	0x20000204
 8000638:	2000028c 	.word	0x2000028c
 800063c:	2000022c 	.word	0x2000022c

08000640 <Task_UART>:
void Task_UART() {
 8000640:	b580      	push	{r7, lr}
 8000642:	b088      	sub	sp, #32
 8000644:	af00      	add	r7, sp, #0
	char buffer[RXBUFF_SIZE];
	strcpy(buffer, stUART3.buffer);
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	492d      	ldr	r1, [pc, #180]	; (8000700 <Task_UART+0xc0>)
 800064a:	4618      	mov	r0, r3
 800064c:	f003 f828 	bl	80036a0 <strcpy>
	char* data = strchr(buffer, '=') + 1;
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	213d      	movs	r1, #61	; 0x3d
 8000654:	4618      	mov	r0, r3
 8000656:	f003 f815 	bl	8003684 <strchr>
 800065a:	4603      	mov	r3, r0
 800065c:	3301      	adds	r3, #1
 800065e:	61fb      	str	r3, [r7, #28]
	char* command = strtok(buffer, "=");
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	4928      	ldr	r1, [pc, #160]	; (8000704 <Task_UART+0xc4>)
 8000664:	4618      	mov	r0, r3
 8000666:	f003 f823 	bl	80036b0 <strtok>
 800066a:	61b8      	str	r0, [r7, #24]

	if (!strcmp(command, LEDON)) {
 800066c:	4926      	ldr	r1, [pc, #152]	; (8000708 <Task_UART+0xc8>)
 800066e:	69b8      	ldr	r0, [r7, #24]
 8000670:	f7ff fdaa 	bl	80001c8 <strcmp>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d107      	bne.n	800068a <Task_UART+0x4a>
		stTimer.period_On = atoi(data);
 800067a:	69f8      	ldr	r0, [r7, #28]
 800067c:	f002 ffcb 	bl	8003616 <atoi>
 8000680:	4603      	mov	r3, r0
 8000682:	461a      	mov	r2, r3
 8000684:	4b21      	ldr	r3, [pc, #132]	; (800070c <Task_UART+0xcc>)
 8000686:	601a      	str	r2, [r3, #0]
		stTimer.period_On = 1000;
		stTimer.period_Off = 1000;
	} else if (!strcmp(command, LEDSTART)) {
		stTimer.periodState = timerPeriodState_On;
	}
}
 8000688:	e036      	b.n	80006f8 <Task_UART+0xb8>
	} else if (!strcmp(command, LEDOFF)) {
 800068a:	4921      	ldr	r1, [pc, #132]	; (8000710 <Task_UART+0xd0>)
 800068c:	69b8      	ldr	r0, [r7, #24]
 800068e:	f7ff fd9b 	bl	80001c8 <strcmp>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d107      	bne.n	80006a8 <Task_UART+0x68>
		stTimer.period_Off = atoi(data);
 8000698:	69f8      	ldr	r0, [r7, #28]
 800069a:	f002 ffbc 	bl	8003616 <atoi>
 800069e:	4603      	mov	r3, r0
 80006a0:	461a      	mov	r2, r3
 80006a2:	4b1a      	ldr	r3, [pc, #104]	; (800070c <Task_UART+0xcc>)
 80006a4:	605a      	str	r2, [r3, #4]
}
 80006a6:	e027      	b.n	80006f8 <Task_UART+0xb8>
	} else if (!strcmp(command, START)) {
 80006a8:	491a      	ldr	r1, [pc, #104]	; (8000714 <Task_UART+0xd4>)
 80006aa:	69b8      	ldr	r0, [r7, #24]
 80006ac:	f7ff fd8c 	bl	80001c8 <strcmp>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d103      	bne.n	80006be <Task_UART+0x7e>
		stUART3.echo = true;
 80006b6:	4b12      	ldr	r3, [pc, #72]	; (8000700 <Task_UART+0xc0>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	759a      	strb	r2, [r3, #22]
}
 80006bc:	e01c      	b.n	80006f8 <Task_UART+0xb8>
	} else if (!strcmp(command, STOP)) {
 80006be:	4916      	ldr	r1, [pc, #88]	; (8000718 <Task_UART+0xd8>)
 80006c0:	69b8      	ldr	r0, [r7, #24]
 80006c2:	f7ff fd81 	bl	80001c8 <strcmp>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d10b      	bne.n	80006e4 <Task_UART+0xa4>
		stUART3.echo = false;
 80006cc:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <Task_UART+0xc0>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	759a      	strb	r2, [r3, #22]
		stTimer.period_On = 1000;
 80006d2:	4b0e      	ldr	r3, [pc, #56]	; (800070c <Task_UART+0xcc>)
 80006d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006d8:	601a      	str	r2, [r3, #0]
		stTimer.period_Off = 1000;
 80006da:	4b0c      	ldr	r3, [pc, #48]	; (800070c <Task_UART+0xcc>)
 80006dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006e0:	605a      	str	r2, [r3, #4]
}
 80006e2:	e009      	b.n	80006f8 <Task_UART+0xb8>
	} else if (!strcmp(command, LEDSTART)) {
 80006e4:	490d      	ldr	r1, [pc, #52]	; (800071c <Task_UART+0xdc>)
 80006e6:	69b8      	ldr	r0, [r7, #24]
 80006e8:	f7ff fd6e 	bl	80001c8 <strcmp>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d102      	bne.n	80006f8 <Task_UART+0xb8>
		stTimer.periodState = timerPeriodState_On;
 80006f2:	4b06      	ldr	r3, [pc, #24]	; (800070c <Task_UART+0xcc>)
 80006f4:	2201      	movs	r2, #1
 80006f6:	731a      	strb	r2, [r3, #12]
}
 80006f8:	bf00      	nop
 80006fa:	3720      	adds	r7, #32
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	20000204 	.word	0x20000204
 8000704:	080039d4 	.word	0x080039d4
 8000708:	080039d8 	.word	0x080039d8
 800070c:	2000021c 	.word	0x2000021c
 8000710:	080039e0 	.word	0x080039e0
 8000714:	080039e8 	.word	0x080039e8
 8000718:	080039f0 	.word	0x080039f0
 800071c:	080039f8 	.word	0x080039f8

08000720 <Toggle_Led>:
void Toggle_Led() {
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
	if (stTimer.periodState == timerPeriodState_Off) {
 8000724:	4b17      	ldr	r3, [pc, #92]	; (8000784 <Toggle_Led+0x64>)
 8000726:	7b1b      	ldrb	r3, [r3, #12]
 8000728:	2b02      	cmp	r3, #2
 800072a:	d112      	bne.n	8000752 <Toggle_Led+0x32>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800072c:	2200      	movs	r2, #0
 800072e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000732:	4815      	ldr	r0, [pc, #84]	; (8000788 <Toggle_Led+0x68>)
 8000734:	f001 f974 	bl	8001a20 <HAL_GPIO_WritePin>
		if (stTimer.count == stTimer.period_Off) {
 8000738:	4b12      	ldr	r3, [pc, #72]	; (8000784 <Toggle_Led+0x64>)
 800073a:	689a      	ldr	r2, [r3, #8]
 800073c:	4b11      	ldr	r3, [pc, #68]	; (8000784 <Toggle_Led+0x64>)
 800073e:	685b      	ldr	r3, [r3, #4]
 8000740:	429a      	cmp	r2, r3
 8000742:	d11c      	bne.n	800077e <Toggle_Led+0x5e>
			stTimer.count = 0;
 8000744:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <Toggle_Led+0x64>)
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
			stTimer.periodState = timerPeriodState_On;
 800074a:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <Toggle_Led+0x64>)
 800074c:	2201      	movs	r2, #1
 800074e:	731a      	strb	r2, [r3, #12]
		if (stTimer.count == stTimer.period_On) {
			stTimer.count = 0;
			stTimer.periodState = timerPeriodState_Off;
		}
	}
}
 8000750:	e015      	b.n	800077e <Toggle_Led+0x5e>
	} else if (stTimer.periodState == timerPeriodState_On) {
 8000752:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <Toggle_Led+0x64>)
 8000754:	7b1b      	ldrb	r3, [r3, #12]
 8000756:	2b01      	cmp	r3, #1
 8000758:	d111      	bne.n	800077e <Toggle_Led+0x5e>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800075a:	2201      	movs	r2, #1
 800075c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000760:	4809      	ldr	r0, [pc, #36]	; (8000788 <Toggle_Led+0x68>)
 8000762:	f001 f95d 	bl	8001a20 <HAL_GPIO_WritePin>
		if (stTimer.count == stTimer.period_On) {
 8000766:	4b07      	ldr	r3, [pc, #28]	; (8000784 <Toggle_Led+0x64>)
 8000768:	689a      	ldr	r2, [r3, #8]
 800076a:	4b06      	ldr	r3, [pc, #24]	; (8000784 <Toggle_Led+0x64>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	429a      	cmp	r2, r3
 8000770:	d105      	bne.n	800077e <Toggle_Led+0x5e>
			stTimer.count = 0;
 8000772:	4b04      	ldr	r3, [pc, #16]	; (8000784 <Toggle_Led+0x64>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
			stTimer.periodState = timerPeriodState_Off;
 8000778:	4b02      	ldr	r3, [pc, #8]	; (8000784 <Toggle_Led+0x64>)
 800077a:	2202      	movs	r2, #2
 800077c:	731a      	strb	r2, [r3, #12]
}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	2000021c 	.word	0x2000021c
 8000788:	40020c00 	.word	0x40020c00

0800078c <Systick_Init>:
void Systick_Init() {
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 8000790:	f001 fd74 	bl	800227c <HAL_RCC_GetHCLKFreq>
 8000794:	4602      	mov	r2, r0
 8000796:	4b09      	ldr	r3, [pc, #36]	; (80007bc <Systick_Init+0x30>)
 8000798:	fba3 2302 	umull	r2, r3, r3, r2
 800079c:	099b      	lsrs	r3, r3, #6
 800079e:	4618      	mov	r0, r3
 80007a0:	f000 fb7b 	bl	8000e9a <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80007a4:	2004      	movs	r0, #4
 80007a6:	f000 fb85 	bl	8000eb4 <HAL_SYSTICK_CLKSourceConfig>
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2100      	movs	r1, #0
 80007ae:	f04f 30ff 	mov.w	r0, #4294967295
 80007b2:	f000 fb48 	bl	8000e46 <HAL_NVIC_SetPriority>
}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	10624dd3 	.word	0x10624dd3

080007c0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80007c4:	f000 f9f4 	bl	8000bb0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80007c8:	f000 f832 	bl	8000830 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80007cc:	f7ff feae 	bl	800052c <MX_GPIO_Init>
	MX_DMA_Init();
 80007d0:	f7ff fe8c 	bl	80004ec <MX_DMA_Init>
	MX_USART3_UART_Init();
 80007d4:	f000 f940 	bl	8000a58 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	Systick_Init();
 80007d8:	f7ff ffd8 	bl	800078c <Systick_Init>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, stUART3.buffer, RXBUFF_SIZE);
 80007dc:	2214      	movs	r2, #20
 80007de:	4910      	ldr	r1, [pc, #64]	; (8000820 <main+0x60>)
 80007e0:	4810      	ldr	r0, [pc, #64]	; (8000824 <main+0x64>)
 80007e2:	f001 fe5d 	bl	80024a0 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 80007e6:	4b10      	ldr	r3, [pc, #64]	; (8000828 <main+0x68>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4a0f      	ldr	r2, [pc, #60]	; (8000828 <main+0x68>)
 80007ec:	6812      	ldr	r2, [r2, #0]
 80007ee:	6812      	ldr	r2, [r2, #0]
 80007f0:	f022 0208 	bic.w	r2, r2, #8
 80007f4:	601a      	str	r2, [r3, #0]
	stTimer.period_On = 500;
 80007f6:	4b0d      	ldr	r3, [pc, #52]	; (800082c <main+0x6c>)
 80007f8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80007fc:	601a      	str	r2, [r3, #0]
	stTimer.period_Off = 500;
 80007fe:	4b0b      	ldr	r3, [pc, #44]	; (800082c <main+0x6c>)
 8000800:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000804:	605a      	str	r2, [r3, #4]

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		if (stUART3.update == true) {
 8000806:	4b06      	ldr	r3, [pc, #24]	; (8000820 <main+0x60>)
 8000808:	7d5b      	ldrb	r3, [r3, #21]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d004      	beq.n	8000818 <main+0x58>
			Task_UART();
 800080e:	f7ff ff17 	bl	8000640 <Task_UART>
			stUART3.update = false;
 8000812:	4b03      	ldr	r3, [pc, #12]	; (8000820 <main+0x60>)
 8000814:	2200      	movs	r2, #0
 8000816:	755a      	strb	r2, [r3, #21]
		}
		Toggle_Led();
 8000818:	f7ff ff82 	bl	8000720 <Toggle_Led>
		if (stUART3.update == true) {
 800081c:	e7f3      	b.n	8000806 <main+0x46>
 800081e:	bf00      	nop
 8000820:	20000204 	.word	0x20000204
 8000824:	2000028c 	.word	0x2000028c
 8000828:	2000022c 	.word	0x2000022c
 800082c:	2000021c 	.word	0x2000021c

08000830 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000830:	b580      	push	{r7, lr}
 8000832:	b094      	sub	sp, #80	; 0x50
 8000834:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000836:	f107 0320 	add.w	r3, r7, #32
 800083a:	2230      	movs	r2, #48	; 0x30
 800083c:	2100      	movs	r1, #0
 800083e:	4618      	mov	r0, r3
 8000840:	f002 ff18 	bl	8003674 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000844:	f107 030c 	add.w	r3, r7, #12
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
 8000852:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE()
 8000854:	2300      	movs	r3, #0
 8000856:	60bb      	str	r3, [r7, #8]
 8000858:	4a22      	ldr	r2, [pc, #136]	; (80008e4 <SystemClock_Config+0xb4>)
 800085a:	4b22      	ldr	r3, [pc, #136]	; (80008e4 <SystemClock_Config+0xb4>)
 800085c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000862:	6413      	str	r3, [r2, #64]	; 0x40
 8000864:	4b1f      	ldr	r3, [pc, #124]	; (80008e4 <SystemClock_Config+0xb4>)
 8000866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000868:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800086c:	60bb      	str	r3, [r7, #8]
 800086e:	68bb      	ldr	r3, [r7, #8]
	;
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000870:	2300      	movs	r3, #0
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	4a1c      	ldr	r2, [pc, #112]	; (80008e8 <SystemClock_Config+0xb8>)
 8000876:	4b1c      	ldr	r3, [pc, #112]	; (80008e8 <SystemClock_Config+0xb8>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800087e:	6013      	str	r3, [r2, #0]
 8000880:	4b19      	ldr	r3, [pc, #100]	; (80008e8 <SystemClock_Config+0xb8>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000888:	607b      	str	r3, [r7, #4]
 800088a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800088c:	2302      	movs	r3, #2
 800088e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000890:	2301      	movs	r3, #1
 8000892:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000894:	2310      	movs	r3, #16
 8000896:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000898:	2300      	movs	r3, #0
 800089a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800089c:	f107 0320 	add.w	r3, r7, #32
 80008a0:	4618      	mov	r0, r3
 80008a2:	f001 f8d7 	bl	8001a54 <HAL_RCC_OscConfig>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <SystemClock_Config+0x80>
		Error_Handler();
 80008ac:	f000 f81e 	bl	80008ec <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80008b0:	230f      	movs	r3, #15
 80008b2:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008b4:	2300      	movs	r3, #0
 80008b6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b8:	2300      	movs	r3, #0
 80008ba:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008bc:	2300      	movs	r3, #0
 80008be:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008c0:	2300      	movs	r3, #0
 80008c2:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80008c4:	f107 030c 	add.w	r3, r7, #12
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f001 fb3a 	bl	8001f44 <HAL_RCC_ClockConfig>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <SystemClock_Config+0xaa>
		Error_Handler();
 80008d6:	f000 f809 	bl	80008ec <Error_Handler>
	}
}
 80008da:	bf00      	nop
 80008dc:	3750      	adds	r7, #80	; 0x50
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40023800 	.word	0x40023800
 80008e8:	40007000 	.word	0x40007000

080008ec <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f0:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80008f2:	e7fe      	b.n	80008f2 <Error_Handler+0x6>

080008f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	607b      	str	r3, [r7, #4]
 80008fe:	4a10      	ldr	r2, [pc, #64]	; (8000940 <HAL_MspInit+0x4c>)
 8000900:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <HAL_MspInit+0x4c>)
 8000902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000904:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000908:	6453      	str	r3, [r2, #68]	; 0x44
 800090a:	4b0d      	ldr	r3, [pc, #52]	; (8000940 <HAL_MspInit+0x4c>)
 800090c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	603b      	str	r3, [r7, #0]
 800091a:	4a09      	ldr	r2, [pc, #36]	; (8000940 <HAL_MspInit+0x4c>)
 800091c:	4b08      	ldr	r3, [pc, #32]	; (8000940 <HAL_MspInit+0x4c>)
 800091e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000924:	6413      	str	r3, [r2, #64]	; 0x40
 8000926:	4b06      	ldr	r3, [pc, #24]	; (8000940 <HAL_MspInit+0x4c>)
 8000928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800092e:	603b      	str	r3, [r7, #0]
 8000930:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000932:	bf00      	nop
 8000934:	370c      	adds	r7, #12
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	40023800 	.word	0x40023800

08000944 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8000948:	e7fe      	b.n	8000948 <NMI_Handler+0x4>

0800094a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800094e:	e7fe      	b.n	800094e <HardFault_Handler+0x4>

08000950 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000954:	e7fe      	b.n	8000954 <MemManage_Handler+0x4>

08000956 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800095a:	e7fe      	b.n	800095a <BusFault_Handler+0x4>

0800095c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000960:	e7fe      	b.n	8000960 <UsageFault_Handler+0x4>

08000962 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr

0800097e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	stTimer.count++;
 8000990:	4b07      	ldr	r3, [pc, #28]	; (80009b0 <SysTick_Handler+0x24>)
 8000992:	689b      	ldr	r3, [r3, #8]
 8000994:	3301      	adds	r3, #1
 8000996:	4a06      	ldr	r2, [pc, #24]	; (80009b0 <SysTick_Handler+0x24>)
 8000998:	6093      	str	r3, [r2, #8]
	if (stTimer.periodState == timerPeriodState_Idle) {
 800099a:	4b05      	ldr	r3, [pc, #20]	; (80009b0 <SysTick_Handler+0x24>)
 800099c:	7b1b      	ldrb	r3, [r3, #12]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d102      	bne.n	80009a8 <SysTick_Handler+0x1c>
		stTimer.count = 0;
 80009a2:	4b03      	ldr	r3, [pc, #12]	; (80009b0 <SysTick_Handler+0x24>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009a8:	f000 f954 	bl	8000c54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ac:	bf00      	nop
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	2000021c 	.word	0x2000021c

080009b4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80009b8:	4802      	ldr	r0, [pc, #8]	; (80009c4 <DMA1_Stream1_IRQHandler+0x10>)
 80009ba:	f000 fc2f 	bl	800121c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	2000022c 	.word	0x2000022c

080009c8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80009cc:	4802      	ldr	r0, [pc, #8]	; (80009d8 <USART3_IRQHandler+0x10>)
 80009ce:	f001 fdcd 	bl	800256c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	2000028c 	.word	0x2000028c

080009dc <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80009e4:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <_sbrk+0x50>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d102      	bne.n	80009f2 <_sbrk+0x16>
		heap_end = &end;
 80009ec:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <_sbrk+0x50>)
 80009ee:	4a10      	ldr	r2, [pc, #64]	; (8000a30 <_sbrk+0x54>)
 80009f0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80009f2:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <_sbrk+0x50>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80009f8:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <_sbrk+0x50>)
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	4413      	add	r3, r2
 8000a00:	466a      	mov	r2, sp
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d907      	bls.n	8000a16 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8000a06:	f002 fe0b 	bl	8003620 <__errno>
 8000a0a:	4602      	mov	r2, r0
 8000a0c:	230c      	movs	r3, #12
 8000a0e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000a10:	f04f 33ff 	mov.w	r3, #4294967295
 8000a14:	e006      	b.n	8000a24 <_sbrk+0x48>
	}

	heap_end += incr;
 8000a16:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <_sbrk+0x50>)
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4413      	add	r3, r2
 8000a1e:	4a03      	ldr	r2, [pc, #12]	; (8000a2c <_sbrk+0x50>)
 8000a20:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000a22:	68fb      	ldr	r3, [r7, #12]
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	3710      	adds	r7, #16
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	200001f8 	.word	0x200001f8
 8000a30:	200002d8 	.word	0x200002d8

08000a34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a38:	4a06      	ldr	r2, [pc, #24]	; (8000a54 <SystemInit+0x20>)
 8000a3a:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <SystemInit+0x20>)
 8000a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a5c:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <MX_USART3_UART_Init+0x4c>)
 8000a5e:	4a12      	ldr	r2, [pc, #72]	; (8000aa8 <MX_USART3_UART_Init+0x50>)
 8000a60:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a62:	4b10      	ldr	r3, [pc, #64]	; (8000aa4 <MX_USART3_UART_Init+0x4c>)
 8000a64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a68:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a6a:	4b0e      	ldr	r3, [pc, #56]	; (8000aa4 <MX_USART3_UART_Init+0x4c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a70:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <MX_USART3_UART_Init+0x4c>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a76:	4b0b      	ldr	r3, [pc, #44]	; (8000aa4 <MX_USART3_UART_Init+0x4c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a7c:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <MX_USART3_UART_Init+0x4c>)
 8000a7e:	220c      	movs	r2, #12
 8000a80:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a82:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <MX_USART3_UART_Init+0x4c>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a88:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <MX_USART3_UART_Init+0x4c>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a8e:	4805      	ldr	r0, [pc, #20]	; (8000aa4 <MX_USART3_UART_Init+0x4c>)
 8000a90:	f001 fc28 	bl	80022e4 <HAL_UART_Init>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000a9a:	f7ff ff27 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	2000028c 	.word	0x2000028c
 8000aa8:	40004800 	.word	0x40004800

08000aac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08a      	sub	sp, #40	; 0x28
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab4:	f107 0314 	add.w	r3, r7, #20
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
 8000ac0:	60da      	str	r2, [r3, #12]
 8000ac2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a34      	ldr	r2, [pc, #208]	; (8000b9c <HAL_UART_MspInit+0xf0>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d162      	bne.n	8000b94 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	613b      	str	r3, [r7, #16]
 8000ad2:	4a33      	ldr	r2, [pc, #204]	; (8000ba0 <HAL_UART_MspInit+0xf4>)
 8000ad4:	4b32      	ldr	r3, [pc, #200]	; (8000ba0 <HAL_UART_MspInit+0xf4>)
 8000ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000adc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ade:	4b30      	ldr	r3, [pc, #192]	; (8000ba0 <HAL_UART_MspInit+0xf4>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ae6:	613b      	str	r3, [r7, #16]
 8000ae8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	4a2c      	ldr	r2, [pc, #176]	; (8000ba0 <HAL_UART_MspInit+0xf4>)
 8000af0:	4b2b      	ldr	r3, [pc, #172]	; (8000ba0 <HAL_UART_MspInit+0xf4>)
 8000af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af4:	f043 0302 	orr.w	r3, r3, #2
 8000af8:	6313      	str	r3, [r2, #48]	; 0x30
 8000afa:	4b29      	ldr	r3, [pc, #164]	; (8000ba0 <HAL_UART_MspInit+0xf4>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	f003 0302 	and.w	r3, r3, #2
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000b06:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000b0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b14:	2303      	movs	r3, #3
 8000b16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b18:	2307      	movs	r3, #7
 8000b1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	4619      	mov	r1, r3
 8000b22:	4820      	ldr	r0, [pc, #128]	; (8000ba4 <HAL_UART_MspInit+0xf8>)
 8000b24:	f000 fde2 	bl	80016ec <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8000b28:	4b1f      	ldr	r3, [pc, #124]	; (8000ba8 <HAL_UART_MspInit+0xfc>)
 8000b2a:	4a20      	ldr	r2, [pc, #128]	; (8000bac <HAL_UART_MspInit+0x100>)
 8000b2c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8000b2e:	4b1e      	ldr	r3, [pc, #120]	; (8000ba8 <HAL_UART_MspInit+0xfc>)
 8000b30:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b34:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b36:	4b1c      	ldr	r3, [pc, #112]	; (8000ba8 <HAL_UART_MspInit+0xfc>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b3c:	4b1a      	ldr	r3, [pc, #104]	; (8000ba8 <HAL_UART_MspInit+0xfc>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b42:	4b19      	ldr	r3, [pc, #100]	; (8000ba8 <HAL_UART_MspInit+0xfc>)
 8000b44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b48:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b4a:	4b17      	ldr	r3, [pc, #92]	; (8000ba8 <HAL_UART_MspInit+0xfc>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b50:	4b15      	ldr	r3, [pc, #84]	; (8000ba8 <HAL_UART_MspInit+0xfc>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000b56:	4b14      	ldr	r3, [pc, #80]	; (8000ba8 <HAL_UART_MspInit+0xfc>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b5c:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <HAL_UART_MspInit+0xfc>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b62:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <HAL_UART_MspInit+0xfc>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000b68:	480f      	ldr	r0, [pc, #60]	; (8000ba8 <HAL_UART_MspInit+0xfc>)
 8000b6a:	f000 f9bf 	bl	8000eec <HAL_DMA_Init>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000b74:	f7ff feba 	bl	80008ec <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	4a0b      	ldr	r2, [pc, #44]	; (8000ba8 <HAL_UART_MspInit+0xfc>)
 8000b7c:	639a      	str	r2, [r3, #56]	; 0x38
 8000b7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ba8 <HAL_UART_MspInit+0xfc>)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000b84:	2200      	movs	r2, #0
 8000b86:	2100      	movs	r1, #0
 8000b88:	2027      	movs	r0, #39	; 0x27
 8000b8a:	f000 f95c 	bl	8000e46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000b8e:	2027      	movs	r0, #39	; 0x27
 8000b90:	f000 f975 	bl	8000e7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000b94:	bf00      	nop
 8000b96:	3728      	adds	r7, #40	; 0x28
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40004800 	.word	0x40004800
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	40020400 	.word	0x40020400
 8000ba8:	2000022c 	.word	0x2000022c
 8000bac:	40026028 	.word	0x40026028

08000bb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bb4:	4a0e      	ldr	r2, [pc, #56]	; (8000bf0 <HAL_Init+0x40>)
 8000bb6:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <HAL_Init+0x40>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bc0:	4a0b      	ldr	r2, [pc, #44]	; (8000bf0 <HAL_Init+0x40>)
 8000bc2:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <HAL_Init+0x40>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bcc:	4a08      	ldr	r2, [pc, #32]	; (8000bf0 <HAL_Init+0x40>)
 8000bce:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <HAL_Init+0x40>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bd8:	2003      	movs	r0, #3
 8000bda:	f000 f929 	bl	8000e30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bde:	200f      	movs	r0, #15
 8000be0:	f000 f808 	bl	8000bf4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000be4:	f7ff fe86 	bl	80008f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000be8:	2300      	movs	r3, #0
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40023c00 	.word	0x40023c00

08000bf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bfc:	4b12      	ldr	r3, [pc, #72]	; (8000c48 <HAL_InitTick+0x54>)
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <HAL_InitTick+0x58>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	4619      	mov	r1, r3
 8000c06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c12:	4618      	mov	r0, r3
 8000c14:	f000 f941 	bl	8000e9a <HAL_SYSTICK_Config>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	e00e      	b.n	8000c40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2b0f      	cmp	r3, #15
 8000c26:	d80a      	bhi.n	8000c3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	6879      	ldr	r1, [r7, #4]
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	f000 f909 	bl	8000e46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c34:	4a06      	ldr	r2, [pc, #24]	; (8000c50 <HAL_InitTick+0x5c>)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	e000      	b.n	8000c40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	20000000 	.word	0x20000000
 8000c4c:	20000008 	.word	0x20000008
 8000c50:	20000004 	.word	0x20000004

08000c54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <HAL_IncTick+0x20>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <HAL_IncTick+0x24>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4413      	add	r3, r2
 8000c64:	4a04      	ldr	r2, [pc, #16]	; (8000c78 <HAL_IncTick+0x24>)
 8000c66:	6013      	str	r3, [r2, #0]
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	20000008 	.word	0x20000008
 8000c78:	200002d0 	.word	0x200002d0

08000c7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c80:	4b03      	ldr	r3, [pc, #12]	; (8000c90 <HAL_GetTick+0x14>)
 8000c82:	681b      	ldr	r3, [r3, #0]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	200002d0 	.word	0x200002d0

08000c94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b085      	sub	sp, #20
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	f003 0307 	and.w	r3, r3, #7
 8000ca2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000caa:	68ba      	ldr	r2, [r7, #8]
 8000cac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cc6:	4a04      	ldr	r2, [pc, #16]	; (8000cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	60d3      	str	r3, [r2, #12]
}
 8000ccc:	bf00      	nop
 8000cce:	3714      	adds	r7, #20
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce0:	4b04      	ldr	r3, [pc, #16]	; (8000cf4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	0a1b      	lsrs	r3, r3, #8
 8000ce6:	f003 0307 	and.w	r3, r3, #7
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	e000ed00 	.word	0xe000ed00

08000cf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	db0b      	blt.n	8000d22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d0a:	4909      	ldr	r1, [pc, #36]	; (8000d30 <__NVIC_EnableIRQ+0x38>)
 8000d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d10:	095b      	lsrs	r3, r3, #5
 8000d12:	79fa      	ldrb	r2, [r7, #7]
 8000d14:	f002 021f 	and.w	r2, r2, #31
 8000d18:	2001      	movs	r0, #1
 8000d1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d22:	bf00      	nop
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	e000e100 	.word	0xe000e100

08000d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	6039      	str	r1, [r7, #0]
 8000d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	db0a      	blt.n	8000d5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d48:	490d      	ldr	r1, [pc, #52]	; (8000d80 <__NVIC_SetPriority+0x4c>)
 8000d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4e:	683a      	ldr	r2, [r7, #0]
 8000d50:	b2d2      	uxtb	r2, r2
 8000d52:	0112      	lsls	r2, r2, #4
 8000d54:	b2d2      	uxtb	r2, r2
 8000d56:	440b      	add	r3, r1
 8000d58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d5c:	e00a      	b.n	8000d74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d5e:	4909      	ldr	r1, [pc, #36]	; (8000d84 <__NVIC_SetPriority+0x50>)
 8000d60:	79fb      	ldrb	r3, [r7, #7]
 8000d62:	f003 030f 	and.w	r3, r3, #15
 8000d66:	3b04      	subs	r3, #4
 8000d68:	683a      	ldr	r2, [r7, #0]
 8000d6a:	b2d2      	uxtb	r2, r2
 8000d6c:	0112      	lsls	r2, r2, #4
 8000d6e:	b2d2      	uxtb	r2, r2
 8000d70:	440b      	add	r3, r1
 8000d72:	761a      	strb	r2, [r3, #24]
}
 8000d74:	bf00      	nop
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	e000e100 	.word	0xe000e100
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b089      	sub	sp, #36	; 0x24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60f8      	str	r0, [r7, #12]
 8000d90:	60b9      	str	r1, [r7, #8]
 8000d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	f003 0307 	and.w	r3, r3, #7
 8000d9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	f1c3 0307 	rsb	r3, r3, #7
 8000da2:	2b04      	cmp	r3, #4
 8000da4:	bf28      	it	cs
 8000da6:	2304      	movcs	r3, #4
 8000da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	3304      	adds	r3, #4
 8000dae:	2b06      	cmp	r3, #6
 8000db0:	d902      	bls.n	8000db8 <NVIC_EncodePriority+0x30>
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	3b03      	subs	r3, #3
 8000db6:	e000      	b.n	8000dba <NVIC_EncodePriority+0x32>
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	69bb      	ldr	r3, [r7, #24]
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	1e5a      	subs	r2, r3, #1
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	401a      	ands	r2, r3
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dce:	2101      	movs	r1, #1
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd6:	1e59      	subs	r1, r3, #1
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ddc:	4313      	orrs	r3, r2
         );
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3724      	adds	r7, #36	; 0x24
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
	...

08000dec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	3b01      	subs	r3, #1
 8000df8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dfc:	d301      	bcc.n	8000e02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e00f      	b.n	8000e22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e02:	4a0a      	ldr	r2, [pc, #40]	; (8000e2c <SysTick_Config+0x40>)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	3b01      	subs	r3, #1
 8000e08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e0a:	210f      	movs	r1, #15
 8000e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e10:	f7ff ff90 	bl	8000d34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e14:	4b05      	ldr	r3, [pc, #20]	; (8000e2c <SysTick_Config+0x40>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e1a:	4b04      	ldr	r3, [pc, #16]	; (8000e2c <SysTick_Config+0x40>)
 8000e1c:	2207      	movs	r2, #7
 8000e1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	e000e010 	.word	0xe000e010

08000e30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	f7ff ff2b 	bl	8000c94 <__NVIC_SetPriorityGrouping>
}
 8000e3e:	bf00      	nop
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b086      	sub	sp, #24
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	60b9      	str	r1, [r7, #8]
 8000e50:	607a      	str	r2, [r7, #4]
 8000e52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e58:	f7ff ff40 	bl	8000cdc <__NVIC_GetPriorityGrouping>
 8000e5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e5e:	687a      	ldr	r2, [r7, #4]
 8000e60:	68b9      	ldr	r1, [r7, #8]
 8000e62:	6978      	ldr	r0, [r7, #20]
 8000e64:	f7ff ff90 	bl	8000d88 <NVIC_EncodePriority>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e6e:	4611      	mov	r1, r2
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff ff5f 	bl	8000d34 <__NVIC_SetPriority>
}
 8000e76:	bf00      	nop
 8000e78:	3718      	adds	r7, #24
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b082      	sub	sp, #8
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	4603      	mov	r3, r0
 8000e86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff ff33 	bl	8000cf8 <__NVIC_EnableIRQ>
}
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b082      	sub	sp, #8
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f7ff ffa2 	bl	8000dec <SysTick_Config>
 8000ea8:	4603      	mov	r3, r0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
	...

08000eb4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2b04      	cmp	r3, #4
 8000ec0:	d106      	bne.n	8000ed0 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000ec2:	4a09      	ldr	r2, [pc, #36]	; (8000ee8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000ec4:	4b08      	ldr	r3, [pc, #32]	; (8000ee8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f043 0304 	orr.w	r3, r3, #4
 8000ecc:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000ece:	e005      	b.n	8000edc <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000ed0:	4a05      	ldr	r2, [pc, #20]	; (8000ee8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000ed2:	4b05      	ldr	r3, [pc, #20]	; (8000ee8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f023 0304 	bic.w	r3, r3, #4
 8000eda:	6013      	str	r3, [r2, #0]
}
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	e000e010 	.word	0xe000e010

08000eec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000ef8:	f7ff fec0 	bl	8000c7c <HAL_GetTick>
 8000efc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d101      	bne.n	8000f08 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000f04:	2301      	movs	r3, #1
 8000f06:	e099      	b.n	800103c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2202      	movs	r2, #2
 8000f0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2200      	movs	r2, #0
 8000f14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	687a      	ldr	r2, [r7, #4]
 8000f1e:	6812      	ldr	r2, [r2, #0]
 8000f20:	6812      	ldr	r2, [r2, #0]
 8000f22:	f022 0201 	bic.w	r2, r2, #1
 8000f26:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f28:	e00f      	b.n	8000f4a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f2a:	f7ff fea7 	bl	8000c7c <HAL_GetTick>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	2b05      	cmp	r3, #5
 8000f36:	d908      	bls.n	8000f4a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2220      	movs	r2, #32
 8000f3c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2203      	movs	r2, #3
 8000f42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000f46:	2303      	movs	r3, #3
 8000f48:	e078      	b.n	800103c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f003 0301 	and.w	r3, r3, #1
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d1e8      	bne.n	8000f2a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000f60:	697a      	ldr	r2, [r7, #20]
 8000f62:	4b38      	ldr	r3, [pc, #224]	; (8001044 <HAL_DMA_Init+0x158>)
 8000f64:	4013      	ands	r3, r2
 8000f66:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	685a      	ldr	r2, [r3, #4]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f76:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	691b      	ldr	r3, [r3, #16]
 8000f7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	699b      	ldr	r3, [r3, #24]
 8000f88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6a1b      	ldr	r3, [r3, #32]
 8000f94:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f96:	697a      	ldr	r2, [r7, #20]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa0:	2b04      	cmp	r3, #4
 8000fa2:	d107      	bne.n	8000fb4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fac:	4313      	orrs	r3, r2
 8000fae:	697a      	ldr	r2, [r7, #20]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	697a      	ldr	r2, [r7, #20]
 8000fba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	695b      	ldr	r3, [r3, #20]
 8000fc2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	f023 0307 	bic.w	r3, r3, #7
 8000fca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd0:	697a      	ldr	r2, [r7, #20]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fda:	2b04      	cmp	r3, #4
 8000fdc:	d117      	bne.n	800100e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fe2:	697a      	ldr	r2, [r7, #20]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d00e      	beq.n	800100e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f000 fb01 	bl	80015f8 <DMA_CheckFifoParam>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d008      	beq.n	800100e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2240      	movs	r2, #64	; 0x40
 8001000:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2201      	movs	r2, #1
 8001006:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800100a:	2301      	movs	r3, #1
 800100c:	e016      	b.n	800103c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	697a      	ldr	r2, [r7, #20]
 8001014:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f000 fab8 	bl	800158c <DMA_CalcBaseAndBitshift>
 800101c:	4603      	mov	r3, r0
 800101e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001024:	223f      	movs	r2, #63	; 0x3f
 8001026:	409a      	lsls	r2, r3
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2200      	movs	r2, #0
 8001030:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2201      	movs	r2, #1
 8001036:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800103a:	2300      	movs	r3, #0
}
 800103c:	4618      	mov	r0, r3
 800103e:	3718      	adds	r7, #24
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	f010803f 	.word	0xf010803f

08001048 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
 8001054:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001056:	2300      	movs	r3, #0
 8001058:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800105e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001066:	2b01      	cmp	r3, #1
 8001068:	d101      	bne.n	800106e <HAL_DMA_Start_IT+0x26>
 800106a:	2302      	movs	r3, #2
 800106c:	e040      	b.n	80010f0 <HAL_DMA_Start_IT+0xa8>
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	2201      	movs	r2, #1
 8001072:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800107c:	b2db      	uxtb	r3, r3
 800107e:	2b01      	cmp	r3, #1
 8001080:	d12f      	bne.n	80010e2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	2202      	movs	r2, #2
 8001086:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	2200      	movs	r2, #0
 800108e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	68b9      	ldr	r1, [r7, #8]
 8001096:	68f8      	ldr	r0, [r7, #12]
 8001098:	f000 fa4a 	bl	8001530 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010a0:	223f      	movs	r2, #63	; 0x3f
 80010a2:	409a      	lsls	r2, r3
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	68fa      	ldr	r2, [r7, #12]
 80010ae:	6812      	ldr	r2, [r2, #0]
 80010b0:	6812      	ldr	r2, [r2, #0]
 80010b2:	f042 0216 	orr.w	r2, r2, #22
 80010b6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d007      	beq.n	80010d0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	68fa      	ldr	r2, [r7, #12]
 80010c6:	6812      	ldr	r2, [r2, #0]
 80010c8:	6812      	ldr	r2, [r2, #0]
 80010ca:	f042 0208 	orr.w	r2, r2, #8
 80010ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	68fa      	ldr	r2, [r7, #12]
 80010d6:	6812      	ldr	r2, [r2, #0]
 80010d8:	6812      	ldr	r2, [r2, #0]
 80010da:	f042 0201 	orr.w	r2, r2, #1
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	e005      	b.n	80010ee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	2200      	movs	r2, #0
 80010e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80010ea:	2302      	movs	r3, #2
 80010ec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80010ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3718      	adds	r7, #24
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001104:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001106:	f7ff fdb9 	bl	8000c7c <HAL_GetTick>
 800110a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001112:	b2db      	uxtb	r3, r3
 8001114:	2b02      	cmp	r3, #2
 8001116:	d008      	beq.n	800112a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2280      	movs	r2, #128	; 0x80
 800111c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2200      	movs	r2, #0
 8001122:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e052      	b.n	80011d0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	6812      	ldr	r2, [r2, #0]
 8001132:	6812      	ldr	r2, [r2, #0]
 8001134:	f022 0216 	bic.w	r2, r2, #22
 8001138:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	6812      	ldr	r2, [r2, #0]
 8001142:	6952      	ldr	r2, [r2, #20]
 8001144:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001148:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114e:	2b00      	cmp	r3, #0
 8001150:	d103      	bne.n	800115a <HAL_DMA_Abort+0x62>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001156:	2b00      	cmp	r3, #0
 8001158:	d007      	beq.n	800116a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	6812      	ldr	r2, [r2, #0]
 8001162:	6812      	ldr	r2, [r2, #0]
 8001164:	f022 0208 	bic.w	r2, r2, #8
 8001168:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	6812      	ldr	r2, [r2, #0]
 8001172:	6812      	ldr	r2, [r2, #0]
 8001174:	f022 0201 	bic.w	r2, r2, #1
 8001178:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800117a:	e013      	b.n	80011a4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800117c:	f7ff fd7e 	bl	8000c7c <HAL_GetTick>
 8001180:	4602      	mov	r2, r0
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	2b05      	cmp	r3, #5
 8001188:	d90c      	bls.n	80011a4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2220      	movs	r2, #32
 800118e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2203      	movs	r2, #3
 8001194:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2200      	movs	r2, #0
 800119c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80011a0:	2303      	movs	r3, #3
 80011a2:	e015      	b.n	80011d0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d1e4      	bne.n	800117c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011b6:	223f      	movs	r2, #63	; 0x3f
 80011b8:	409a      	lsls	r2, r3
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2201      	movs	r2, #1
 80011c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2200      	movs	r2, #0
 80011ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80011ce:	2300      	movs	r3, #0
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3710      	adds	r7, #16
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d004      	beq.n	80011f6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2280      	movs	r2, #128	; 0x80
 80011f0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e00c      	b.n	8001210 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2205      	movs	r2, #5
 80011fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	6812      	ldr	r2, [r2, #0]
 8001206:	6812      	ldr	r2, [r2, #0]
 8001208:	f022 0201 	bic.w	r2, r2, #1
 800120c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800120e:	2300      	movs	r3, #0
}
 8001210:	4618      	mov	r0, r3
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b086      	sub	sp, #24
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001224:	2300      	movs	r3, #0
 8001226:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001228:	4b92      	ldr	r3, [pc, #584]	; (8001474 <HAL_DMA_IRQHandler+0x258>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a92      	ldr	r2, [pc, #584]	; (8001478 <HAL_DMA_IRQHandler+0x25c>)
 800122e:	fba2 2303 	umull	r2, r3, r2, r3
 8001232:	0a9b      	lsrs	r3, r3, #10
 8001234:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800123a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001246:	2208      	movs	r2, #8
 8001248:	409a      	lsls	r2, r3
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	4013      	ands	r3, r2
 800124e:	2b00      	cmp	r3, #0
 8001250:	d01a      	beq.n	8001288 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f003 0304 	and.w	r3, r3, #4
 800125c:	2b00      	cmp	r3, #0
 800125e:	d013      	beq.n	8001288 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	687a      	ldr	r2, [r7, #4]
 8001266:	6812      	ldr	r2, [r2, #0]
 8001268:	6812      	ldr	r2, [r2, #0]
 800126a:	f022 0204 	bic.w	r2, r2, #4
 800126e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001274:	2208      	movs	r2, #8
 8001276:	409a      	lsls	r2, r3
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001280:	f043 0201 	orr.w	r2, r3, #1
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800128c:	2201      	movs	r2, #1
 800128e:	409a      	lsls	r2, r3
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	4013      	ands	r3, r2
 8001294:	2b00      	cmp	r3, #0
 8001296:	d012      	beq.n	80012be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	695b      	ldr	r3, [r3, #20]
 800129e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d00b      	beq.n	80012be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012aa:	2201      	movs	r2, #1
 80012ac:	409a      	lsls	r2, r3
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012b6:	f043 0202 	orr.w	r2, r3, #2
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012c2:	2204      	movs	r2, #4
 80012c4:	409a      	lsls	r2, r3
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	4013      	ands	r3, r2
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d012      	beq.n	80012f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 0302 	and.w	r3, r3, #2
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d00b      	beq.n	80012f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012e0:	2204      	movs	r2, #4
 80012e2:	409a      	lsls	r2, r3
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012ec:	f043 0204 	orr.w	r2, r3, #4
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012f8:	2210      	movs	r2, #16
 80012fa:	409a      	lsls	r2, r3
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	4013      	ands	r3, r2
 8001300:	2b00      	cmp	r3, #0
 8001302:	d043      	beq.n	800138c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0308 	and.w	r3, r3, #8
 800130e:	2b00      	cmp	r3, #0
 8001310:	d03c      	beq.n	800138c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001316:	2210      	movs	r2, #16
 8001318:	409a      	lsls	r2, r3
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001328:	2b00      	cmp	r3, #0
 800132a:	d018      	beq.n	800135e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d108      	bne.n	800134c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133e:	2b00      	cmp	r3, #0
 8001340:	d024      	beq.n	800138c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	4798      	blx	r3
 800134a:	e01f      	b.n	800138c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001350:	2b00      	cmp	r3, #0
 8001352:	d01b      	beq.n	800138c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	4798      	blx	r3
 800135c:	e016      	b.n	800138c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001368:	2b00      	cmp	r3, #0
 800136a:	d107      	bne.n	800137c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	6812      	ldr	r2, [r2, #0]
 8001374:	6812      	ldr	r2, [r2, #0]
 8001376:	f022 0208 	bic.w	r2, r2, #8
 800137a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001380:	2b00      	cmp	r3, #0
 8001382:	d003      	beq.n	800138c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001390:	2220      	movs	r2, #32
 8001392:	409a      	lsls	r2, r3
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	4013      	ands	r3, r2
 8001398:	2b00      	cmp	r3, #0
 800139a:	f000 808e 	beq.w	80014ba <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0310 	and.w	r3, r3, #16
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	f000 8086 	beq.w	80014ba <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013b2:	2220      	movs	r2, #32
 80013b4:	409a      	lsls	r2, r3
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	2b05      	cmp	r3, #5
 80013c4:	d136      	bne.n	8001434 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	6812      	ldr	r2, [r2, #0]
 80013ce:	6812      	ldr	r2, [r2, #0]
 80013d0:	f022 0216 	bic.w	r2, r2, #22
 80013d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	6812      	ldr	r2, [r2, #0]
 80013de:	6952      	ldr	r2, [r2, #20]
 80013e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d103      	bne.n	80013f6 <HAL_DMA_IRQHandler+0x1da>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d007      	beq.n	8001406 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	6812      	ldr	r2, [r2, #0]
 80013fe:	6812      	ldr	r2, [r2, #0]
 8001400:	f022 0208 	bic.w	r2, r2, #8
 8001404:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800140a:	223f      	movs	r2, #63	; 0x3f
 800140c:	409a      	lsls	r2, r3
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2201      	movs	r2, #1
 8001416:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2200      	movs	r2, #0
 800141e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001426:	2b00      	cmp	r3, #0
 8001428:	d07d      	beq.n	8001526 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	4798      	blx	r3
        }
        return;
 8001432:	e078      	b.n	8001526 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d01c      	beq.n	800147c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d108      	bne.n	8001462 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001454:	2b00      	cmp	r3, #0
 8001456:	d030      	beq.n	80014ba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	4798      	blx	r3
 8001460:	e02b      	b.n	80014ba <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001466:	2b00      	cmp	r3, #0
 8001468:	d027      	beq.n	80014ba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	4798      	blx	r3
 8001472:	e022      	b.n	80014ba <HAL_DMA_IRQHandler+0x29e>
 8001474:	20000000 	.word	0x20000000
 8001478:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001486:	2b00      	cmp	r3, #0
 8001488:	d10f      	bne.n	80014aa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	6812      	ldr	r2, [r2, #0]
 8001492:	6812      	ldr	r2, [r2, #0]
 8001494:	f022 0210 	bic.w	r2, r2, #16
 8001498:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2201      	movs	r2, #1
 800149e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d003      	beq.n	80014ba <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d032      	beq.n	8001528 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d022      	beq.n	8001514 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2205      	movs	r2, #5
 80014d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	6812      	ldr	r2, [r2, #0]
 80014de:	6812      	ldr	r2, [r2, #0]
 80014e0:	f022 0201 	bic.w	r2, r2, #1
 80014e4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	3301      	adds	r3, #1
 80014ea:	60bb      	str	r3, [r7, #8]
 80014ec:	697a      	ldr	r2, [r7, #20]
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d807      	bhi.n	8001502 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0301 	and.w	r3, r3, #1
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d1f2      	bne.n	80014e6 <HAL_DMA_IRQHandler+0x2ca>
 8001500:	e000      	b.n	8001504 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001502:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2201      	movs	r2, #1
 8001508:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001518:	2b00      	cmp	r3, #0
 800151a:	d005      	beq.n	8001528 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	4798      	blx	r3
 8001524:	e000      	b.n	8001528 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001526:	bf00      	nop
    }
  }
}
 8001528:	3718      	adds	r7, #24
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop

08001530 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
 800153c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	68fa      	ldr	r2, [r7, #12]
 8001544:	6812      	ldr	r2, [r2, #0]
 8001546:	6812      	ldr	r2, [r2, #0]
 8001548:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800154c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	683a      	ldr	r2, [r7, #0]
 8001554:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	2b40      	cmp	r3, #64	; 0x40
 800155c:	d108      	bne.n	8001570 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	68ba      	ldr	r2, [r7, #8]
 800156c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800156e:	e007      	b.n	8001580 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	68ba      	ldr	r2, [r7, #8]
 8001576:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	60da      	str	r2, [r3, #12]
}
 8001580:	bf00      	nop
 8001582:	3714      	adds	r7, #20
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	b2db      	uxtb	r3, r3
 800159a:	3b10      	subs	r3, #16
 800159c:	4a14      	ldr	r2, [pc, #80]	; (80015f0 <DMA_CalcBaseAndBitshift+0x64>)
 800159e:	fba2 2303 	umull	r2, r3, r2, r3
 80015a2:	091b      	lsrs	r3, r3, #4
 80015a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80015a6:	4a13      	ldr	r2, [pc, #76]	; (80015f4 <DMA_CalcBaseAndBitshift+0x68>)
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	4413      	add	r3, r2
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	461a      	mov	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	2b03      	cmp	r3, #3
 80015b8:	d909      	bls.n	80015ce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80015c2:	f023 0303 	bic.w	r3, r3, #3
 80015c6:	1d1a      	adds	r2, r3, #4
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	659a      	str	r2, [r3, #88]	; 0x58
 80015cc:	e007      	b.n	80015de <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80015d6:	f023 0303 	bic.w	r3, r3, #3
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3714      	adds	r7, #20
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	aaaaaaab 	.word	0xaaaaaaab
 80015f4:	08003a1c 	.word	0x08003a1c

080015f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001600:	2300      	movs	r3, #0
 8001602:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001608:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	699b      	ldr	r3, [r3, #24]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d11f      	bne.n	8001652 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	2b03      	cmp	r3, #3
 8001616:	d855      	bhi.n	80016c4 <DMA_CheckFifoParam+0xcc>
 8001618:	a201      	add	r2, pc, #4	; (adr r2, 8001620 <DMA_CheckFifoParam+0x28>)
 800161a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800161e:	bf00      	nop
 8001620:	08001631 	.word	0x08001631
 8001624:	08001643 	.word	0x08001643
 8001628:	08001631 	.word	0x08001631
 800162c:	080016c5 	.word	0x080016c5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001634:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d045      	beq.n	80016c8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001640:	e042      	b.n	80016c8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001646:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800164a:	d13f      	bne.n	80016cc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001650:	e03c      	b.n	80016cc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800165a:	d121      	bne.n	80016a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	2b03      	cmp	r3, #3
 8001660:	d836      	bhi.n	80016d0 <DMA_CheckFifoParam+0xd8>
 8001662:	a201      	add	r2, pc, #4	; (adr r2, 8001668 <DMA_CheckFifoParam+0x70>)
 8001664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001668:	08001679 	.word	0x08001679
 800166c:	0800167f 	.word	0x0800167f
 8001670:	08001679 	.word	0x08001679
 8001674:	08001691 	.word	0x08001691
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	73fb      	strb	r3, [r7, #15]
      break;
 800167c:	e02f      	b.n	80016de <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001682:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d024      	beq.n	80016d4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800168e:	e021      	b.n	80016d4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001694:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001698:	d11e      	bne.n	80016d8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800169e:	e01b      	b.n	80016d8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d902      	bls.n	80016ac <DMA_CheckFifoParam+0xb4>
 80016a6:	2b03      	cmp	r3, #3
 80016a8:	d003      	beq.n	80016b2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80016aa:	e018      	b.n	80016de <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	73fb      	strb	r3, [r7, #15]
      break;
 80016b0:	e015      	b.n	80016de <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d00e      	beq.n	80016dc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	73fb      	strb	r3, [r7, #15]
      break;
 80016c2:	e00b      	b.n	80016dc <DMA_CheckFifoParam+0xe4>
      break;
 80016c4:	bf00      	nop
 80016c6:	e00a      	b.n	80016de <DMA_CheckFifoParam+0xe6>
      break;
 80016c8:	bf00      	nop
 80016ca:	e008      	b.n	80016de <DMA_CheckFifoParam+0xe6>
      break;
 80016cc:	bf00      	nop
 80016ce:	e006      	b.n	80016de <DMA_CheckFifoParam+0xe6>
      break;
 80016d0:	bf00      	nop
 80016d2:	e004      	b.n	80016de <DMA_CheckFifoParam+0xe6>
      break;
 80016d4:	bf00      	nop
 80016d6:	e002      	b.n	80016de <DMA_CheckFifoParam+0xe6>
      break;   
 80016d8:	bf00      	nop
 80016da:	e000      	b.n	80016de <DMA_CheckFifoParam+0xe6>
      break;
 80016dc:	bf00      	nop
    }
  } 
  
  return status; 
 80016de:	7bfb      	ldrb	r3, [r7, #15]
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3714      	adds	r7, #20
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b089      	sub	sp, #36	; 0x24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016f6:	2300      	movs	r3, #0
 80016f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016fa:	2300      	movs	r3, #0
 80016fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016fe:	2300      	movs	r3, #0
 8001700:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001702:	2300      	movs	r3, #0
 8001704:	61fb      	str	r3, [r7, #28]
 8001706:	e16b      	b.n	80019e0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001708:	2201      	movs	r2, #1
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	4013      	ands	r3, r2
 800171a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800171c:	693a      	ldr	r2, [r7, #16]
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	429a      	cmp	r2, r3
 8001722:	f040 815a 	bne.w	80019da <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f003 0303 	and.w	r3, r3, #3
 800172e:	2b01      	cmp	r3, #1
 8001730:	d005      	beq.n	800173e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800173a:	2b02      	cmp	r3, #2
 800173c:	d130      	bne.n	80017a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	2203      	movs	r2, #3
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	43db      	mvns	r3, r3
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	4013      	ands	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	68da      	ldr	r2, [r3, #12]
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	4313      	orrs	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001774:	2201      	movs	r2, #1
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	43db      	mvns	r3, r3
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	4013      	ands	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	091b      	lsrs	r3, r3, #4
 800178a:	f003 0201 	and.w	r2, r3, #1
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	4313      	orrs	r3, r2
 8001798:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f003 0303 	and.w	r3, r3, #3
 80017a8:	2b03      	cmp	r3, #3
 80017aa:	d017      	beq.n	80017dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	2203      	movs	r2, #3
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	43db      	mvns	r3, r3
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	4013      	ands	r3, r2
 80017c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	689a      	ldr	r2, [r3, #8]
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f003 0303 	and.w	r3, r3, #3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d123      	bne.n	8001830 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	08da      	lsrs	r2, r3, #3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	3208      	adds	r2, #8
 80017f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	f003 0307 	and.w	r3, r3, #7
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	220f      	movs	r2, #15
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	43db      	mvns	r3, r3
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	4013      	ands	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	691a      	ldr	r2, [r3, #16]
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	f003 0307 	and.w	r3, r3, #7
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	4313      	orrs	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	08da      	lsrs	r2, r3, #3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	3208      	adds	r2, #8
 800182a:	69b9      	ldr	r1, [r7, #24]
 800182c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	2203      	movs	r2, #3
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	43db      	mvns	r3, r3
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	4013      	ands	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f003 0203 	and.w	r2, r3, #3
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	4313      	orrs	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800186c:	2b00      	cmp	r3, #0
 800186e:	f000 80b4 	beq.w	80019da <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	4a5f      	ldr	r2, [pc, #380]	; (80019f4 <HAL_GPIO_Init+0x308>)
 8001878:	4b5e      	ldr	r3, [pc, #376]	; (80019f4 <HAL_GPIO_Init+0x308>)
 800187a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001880:	6453      	str	r3, [r2, #68]	; 0x44
 8001882:	4b5c      	ldr	r3, [pc, #368]	; (80019f4 <HAL_GPIO_Init+0x308>)
 8001884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001886:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800188e:	4a5a      	ldr	r2, [pc, #360]	; (80019f8 <HAL_GPIO_Init+0x30c>)
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	089b      	lsrs	r3, r3, #2
 8001894:	3302      	adds	r3, #2
 8001896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800189a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	f003 0303 	and.w	r3, r3, #3
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	220f      	movs	r2, #15
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	43db      	mvns	r3, r3
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	4013      	ands	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a51      	ldr	r2, [pc, #324]	; (80019fc <HAL_GPIO_Init+0x310>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d02b      	beq.n	8001912 <HAL_GPIO_Init+0x226>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a50      	ldr	r2, [pc, #320]	; (8001a00 <HAL_GPIO_Init+0x314>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d025      	beq.n	800190e <HAL_GPIO_Init+0x222>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a4f      	ldr	r2, [pc, #316]	; (8001a04 <HAL_GPIO_Init+0x318>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d01f      	beq.n	800190a <HAL_GPIO_Init+0x21e>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a4e      	ldr	r2, [pc, #312]	; (8001a08 <HAL_GPIO_Init+0x31c>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d019      	beq.n	8001906 <HAL_GPIO_Init+0x21a>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a4d      	ldr	r2, [pc, #308]	; (8001a0c <HAL_GPIO_Init+0x320>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d013      	beq.n	8001902 <HAL_GPIO_Init+0x216>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a4c      	ldr	r2, [pc, #304]	; (8001a10 <HAL_GPIO_Init+0x324>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d00d      	beq.n	80018fe <HAL_GPIO_Init+0x212>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a4b      	ldr	r2, [pc, #300]	; (8001a14 <HAL_GPIO_Init+0x328>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d007      	beq.n	80018fa <HAL_GPIO_Init+0x20e>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a4a      	ldr	r2, [pc, #296]	; (8001a18 <HAL_GPIO_Init+0x32c>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d101      	bne.n	80018f6 <HAL_GPIO_Init+0x20a>
 80018f2:	2307      	movs	r3, #7
 80018f4:	e00e      	b.n	8001914 <HAL_GPIO_Init+0x228>
 80018f6:	2308      	movs	r3, #8
 80018f8:	e00c      	b.n	8001914 <HAL_GPIO_Init+0x228>
 80018fa:	2306      	movs	r3, #6
 80018fc:	e00a      	b.n	8001914 <HAL_GPIO_Init+0x228>
 80018fe:	2305      	movs	r3, #5
 8001900:	e008      	b.n	8001914 <HAL_GPIO_Init+0x228>
 8001902:	2304      	movs	r3, #4
 8001904:	e006      	b.n	8001914 <HAL_GPIO_Init+0x228>
 8001906:	2303      	movs	r3, #3
 8001908:	e004      	b.n	8001914 <HAL_GPIO_Init+0x228>
 800190a:	2302      	movs	r3, #2
 800190c:	e002      	b.n	8001914 <HAL_GPIO_Init+0x228>
 800190e:	2301      	movs	r3, #1
 8001910:	e000      	b.n	8001914 <HAL_GPIO_Init+0x228>
 8001912:	2300      	movs	r3, #0
 8001914:	69fa      	ldr	r2, [r7, #28]
 8001916:	f002 0203 	and.w	r2, r2, #3
 800191a:	0092      	lsls	r2, r2, #2
 800191c:	4093      	lsls	r3, r2
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	4313      	orrs	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001924:	4934      	ldr	r1, [pc, #208]	; (80019f8 <HAL_GPIO_Init+0x30c>)
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	089b      	lsrs	r3, r3, #2
 800192a:	3302      	adds	r3, #2
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001932:	4b3a      	ldr	r3, [pc, #232]	; (8001a1c <HAL_GPIO_Init+0x330>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	43db      	mvns	r3, r3
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	4013      	ands	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d003      	beq.n	8001956 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	4313      	orrs	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001956:	4a31      	ldr	r2, [pc, #196]	; (8001a1c <HAL_GPIO_Init+0x330>)
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800195c:	4b2f      	ldr	r3, [pc, #188]	; (8001a1c <HAL_GPIO_Init+0x330>)
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	43db      	mvns	r3, r3
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	4013      	ands	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001974:	2b00      	cmp	r3, #0
 8001976:	d003      	beq.n	8001980 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	4313      	orrs	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001980:	4a26      	ldr	r2, [pc, #152]	; (8001a1c <HAL_GPIO_Init+0x330>)
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001986:	4b25      	ldr	r3, [pc, #148]	; (8001a1c <HAL_GPIO_Init+0x330>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	43db      	mvns	r3, r3
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	4013      	ands	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d003      	beq.n	80019aa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019aa:	4a1c      	ldr	r2, [pc, #112]	; (8001a1c <HAL_GPIO_Init+0x330>)
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019b0:	4b1a      	ldr	r3, [pc, #104]	; (8001a1c <HAL_GPIO_Init+0x330>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	43db      	mvns	r3, r3
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	4013      	ands	r3, r2
 80019be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d003      	beq.n	80019d4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019d4:	4a11      	ldr	r2, [pc, #68]	; (8001a1c <HAL_GPIO_Init+0x330>)
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	3301      	adds	r3, #1
 80019de:	61fb      	str	r3, [r7, #28]
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	2b0f      	cmp	r3, #15
 80019e4:	f67f ae90 	bls.w	8001708 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019e8:	bf00      	nop
 80019ea:	3724      	adds	r7, #36	; 0x24
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	40023800 	.word	0x40023800
 80019f8:	40013800 	.word	0x40013800
 80019fc:	40020000 	.word	0x40020000
 8001a00:	40020400 	.word	0x40020400
 8001a04:	40020800 	.word	0x40020800
 8001a08:	40020c00 	.word	0x40020c00
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	40021400 	.word	0x40021400
 8001a14:	40021800 	.word	0x40021800
 8001a18:	40021c00 	.word	0x40021c00
 8001a1c:	40013c00 	.word	0x40013c00

08001a20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	460b      	mov	r3, r1
 8001a2a:	807b      	strh	r3, [r7, #2]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a30:	787b      	ldrb	r3, [r7, #1]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d003      	beq.n	8001a3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a36:	887a      	ldrh	r2, [r7, #2]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a3c:	e003      	b.n	8001a46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a3e:	887b      	ldrh	r3, [r7, #2]
 8001a40:	041a      	lsls	r2, r3, #16
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	619a      	str	r2, [r3, #24]
}
 8001a46:	bf00      	nop
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
	...

08001a54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e264      	b.n	8001f30 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d075      	beq.n	8001b5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a72:	4ba3      	ldr	r3, [pc, #652]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	f003 030c 	and.w	r3, r3, #12
 8001a7a:	2b04      	cmp	r3, #4
 8001a7c:	d00c      	beq.n	8001a98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a7e:	4ba0      	ldr	r3, [pc, #640]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a86:	2b08      	cmp	r3, #8
 8001a88:	d112      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a8a:	4b9d      	ldr	r3, [pc, #628]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a96:	d10b      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a98:	4b99      	ldr	r3, [pc, #612]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d05b      	beq.n	8001b5c <HAL_RCC_OscConfig+0x108>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d157      	bne.n	8001b5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e23f      	b.n	8001f30 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ab8:	d106      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x74>
 8001aba:	4a91      	ldr	r2, [pc, #580]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001abc:	4b90      	ldr	r3, [pc, #576]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ac4:	6013      	str	r3, [r2, #0]
 8001ac6:	e01d      	b.n	8001b04 <HAL_RCC_OscConfig+0xb0>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ad0:	d10c      	bne.n	8001aec <HAL_RCC_OscConfig+0x98>
 8001ad2:	4a8b      	ldr	r2, [pc, #556]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001ad4:	4b8a      	ldr	r3, [pc, #552]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001adc:	6013      	str	r3, [r2, #0]
 8001ade:	4a88      	ldr	r2, [pc, #544]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001ae0:	4b87      	ldr	r3, [pc, #540]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ae8:	6013      	str	r3, [r2, #0]
 8001aea:	e00b      	b.n	8001b04 <HAL_RCC_OscConfig+0xb0>
 8001aec:	4a84      	ldr	r2, [pc, #528]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001aee:	4b84      	ldr	r3, [pc, #528]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001af6:	6013      	str	r3, [r2, #0]
 8001af8:	4a81      	ldr	r2, [pc, #516]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001afa:	4b81      	ldr	r3, [pc, #516]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d013      	beq.n	8001b34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b0c:	f7ff f8b6 	bl	8000c7c <HAL_GetTick>
 8001b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b12:	e008      	b.n	8001b26 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b14:	f7ff f8b2 	bl	8000c7c <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	2b64      	cmp	r3, #100	; 0x64
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e204      	b.n	8001f30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b26:	4b76      	ldr	r3, [pc, #472]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d0f0      	beq.n	8001b14 <HAL_RCC_OscConfig+0xc0>
 8001b32:	e014      	b.n	8001b5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b34:	f7ff f8a2 	bl	8000c7c <HAL_GetTick>
 8001b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b3a:	e008      	b.n	8001b4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b3c:	f7ff f89e 	bl	8000c7c <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b64      	cmp	r3, #100	; 0x64
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e1f0      	b.n	8001f30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b4e:	4b6c      	ldr	r3, [pc, #432]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d1f0      	bne.n	8001b3c <HAL_RCC_OscConfig+0xe8>
 8001b5a:	e000      	b.n	8001b5e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d063      	beq.n	8001c32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b6a:	4b65      	ldr	r3, [pc, #404]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f003 030c 	and.w	r3, r3, #12
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d00b      	beq.n	8001b8e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b76:	4b62      	ldr	r3, [pc, #392]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b7e:	2b08      	cmp	r3, #8
 8001b80:	d11c      	bne.n	8001bbc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b82:	4b5f      	ldr	r3, [pc, #380]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d116      	bne.n	8001bbc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b8e:	4b5c      	ldr	r3, [pc, #368]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d005      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x152>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d001      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e1c4      	b.n	8001f30 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ba6:	4956      	ldr	r1, [pc, #344]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001ba8:	4b55      	ldr	r3, [pc, #340]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	691b      	ldr	r3, [r3, #16]
 8001bb4:	00db      	lsls	r3, r3, #3
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bba:	e03a      	b.n	8001c32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d020      	beq.n	8001c06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bc4:	4b4f      	ldr	r3, [pc, #316]	; (8001d04 <HAL_RCC_OscConfig+0x2b0>)
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bca:	f7ff f857 	bl	8000c7c <HAL_GetTick>
 8001bce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bd0:	e008      	b.n	8001be4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bd2:	f7ff f853 	bl	8000c7c <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d901      	bls.n	8001be4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e1a5      	b.n	8001f30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001be4:	4b46      	ldr	r3, [pc, #280]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0302 	and.w	r3, r3, #2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d0f0      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bf0:	4943      	ldr	r1, [pc, #268]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001bf2:	4b43      	ldr	r3, [pc, #268]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	4313      	orrs	r3, r2
 8001c02:	600b      	str	r3, [r1, #0]
 8001c04:	e015      	b.n	8001c32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c06:	4b3f      	ldr	r3, [pc, #252]	; (8001d04 <HAL_RCC_OscConfig+0x2b0>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c0c:	f7ff f836 	bl	8000c7c <HAL_GetTick>
 8001c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c14:	f7ff f832 	bl	8000c7c <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e184      	b.n	8001f30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c26:	4b36      	ldr	r3, [pc, #216]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1f0      	bne.n	8001c14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0308 	and.w	r3, r3, #8
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d030      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	695b      	ldr	r3, [r3, #20]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d016      	beq.n	8001c74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c46:	4b30      	ldr	r3, [pc, #192]	; (8001d08 <HAL_RCC_OscConfig+0x2b4>)
 8001c48:	2201      	movs	r2, #1
 8001c4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c4c:	f7ff f816 	bl	8000c7c <HAL_GetTick>
 8001c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c52:	e008      	b.n	8001c66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c54:	f7ff f812 	bl	8000c7c <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e164      	b.n	8001f30 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c66:	4b26      	ldr	r3, [pc, #152]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001c68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d0f0      	beq.n	8001c54 <HAL_RCC_OscConfig+0x200>
 8001c72:	e015      	b.n	8001ca0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c74:	4b24      	ldr	r3, [pc, #144]	; (8001d08 <HAL_RCC_OscConfig+0x2b4>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c7a:	f7fe ffff 	bl	8000c7c <HAL_GetTick>
 8001c7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c80:	e008      	b.n	8001c94 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c82:	f7fe fffb 	bl	8000c7c <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d901      	bls.n	8001c94 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e14d      	b.n	8001f30 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c94:	4b1a      	ldr	r3, [pc, #104]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001c96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c98:	f003 0302 	and.w	r3, r3, #2
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1f0      	bne.n	8001c82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0304 	and.w	r3, r3, #4
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	f000 80a0 	beq.w	8001dee <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cb2:	4b13      	ldr	r3, [pc, #76]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d10f      	bne.n	8001cde <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60bb      	str	r3, [r7, #8]
 8001cc2:	4a0f      	ldr	r2, [pc, #60]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001cc4:	4b0e      	ldr	r3, [pc, #56]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ccc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cce:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <HAL_RCC_OscConfig+0x2ac>)
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd6:	60bb      	str	r3, [r7, #8]
 8001cd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cde:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <HAL_RCC_OscConfig+0x2b8>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d121      	bne.n	8001d2e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cea:	4a08      	ldr	r2, [pc, #32]	; (8001d0c <HAL_RCC_OscConfig+0x2b8>)
 8001cec:	4b07      	ldr	r3, [pc, #28]	; (8001d0c <HAL_RCC_OscConfig+0x2b8>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cf4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cf6:	f7fe ffc1 	bl	8000c7c <HAL_GetTick>
 8001cfa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cfc:	e011      	b.n	8001d22 <HAL_RCC_OscConfig+0x2ce>
 8001cfe:	bf00      	nop
 8001d00:	40023800 	.word	0x40023800
 8001d04:	42470000 	.word	0x42470000
 8001d08:	42470e80 	.word	0x42470e80
 8001d0c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d10:	f7fe ffb4 	bl	8000c7c <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e106      	b.n	8001f30 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d22:	4b85      	ldr	r3, [pc, #532]	; (8001f38 <HAL_RCC_OscConfig+0x4e4>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d0f0      	beq.n	8001d10 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d106      	bne.n	8001d44 <HAL_RCC_OscConfig+0x2f0>
 8001d36:	4a81      	ldr	r2, [pc, #516]	; (8001f3c <HAL_RCC_OscConfig+0x4e8>)
 8001d38:	4b80      	ldr	r3, [pc, #512]	; (8001f3c <HAL_RCC_OscConfig+0x4e8>)
 8001d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d3c:	f043 0301 	orr.w	r3, r3, #1
 8001d40:	6713      	str	r3, [r2, #112]	; 0x70
 8001d42:	e01c      	b.n	8001d7e <HAL_RCC_OscConfig+0x32a>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	2b05      	cmp	r3, #5
 8001d4a:	d10c      	bne.n	8001d66 <HAL_RCC_OscConfig+0x312>
 8001d4c:	4a7b      	ldr	r2, [pc, #492]	; (8001f3c <HAL_RCC_OscConfig+0x4e8>)
 8001d4e:	4b7b      	ldr	r3, [pc, #492]	; (8001f3c <HAL_RCC_OscConfig+0x4e8>)
 8001d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d52:	f043 0304 	orr.w	r3, r3, #4
 8001d56:	6713      	str	r3, [r2, #112]	; 0x70
 8001d58:	4a78      	ldr	r2, [pc, #480]	; (8001f3c <HAL_RCC_OscConfig+0x4e8>)
 8001d5a:	4b78      	ldr	r3, [pc, #480]	; (8001f3c <HAL_RCC_OscConfig+0x4e8>)
 8001d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d5e:	f043 0301 	orr.w	r3, r3, #1
 8001d62:	6713      	str	r3, [r2, #112]	; 0x70
 8001d64:	e00b      	b.n	8001d7e <HAL_RCC_OscConfig+0x32a>
 8001d66:	4a75      	ldr	r2, [pc, #468]	; (8001f3c <HAL_RCC_OscConfig+0x4e8>)
 8001d68:	4b74      	ldr	r3, [pc, #464]	; (8001f3c <HAL_RCC_OscConfig+0x4e8>)
 8001d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d6c:	f023 0301 	bic.w	r3, r3, #1
 8001d70:	6713      	str	r3, [r2, #112]	; 0x70
 8001d72:	4a72      	ldr	r2, [pc, #456]	; (8001f3c <HAL_RCC_OscConfig+0x4e8>)
 8001d74:	4b71      	ldr	r3, [pc, #452]	; (8001f3c <HAL_RCC_OscConfig+0x4e8>)
 8001d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d78:	f023 0304 	bic.w	r3, r3, #4
 8001d7c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d015      	beq.n	8001db2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d86:	f7fe ff79 	bl	8000c7c <HAL_GetTick>
 8001d8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d8c:	e00a      	b.n	8001da4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d8e:	f7fe ff75 	bl	8000c7c <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d901      	bls.n	8001da4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e0c5      	b.n	8001f30 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001da4:	4b65      	ldr	r3, [pc, #404]	; (8001f3c <HAL_RCC_OscConfig+0x4e8>)
 8001da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d0ee      	beq.n	8001d8e <HAL_RCC_OscConfig+0x33a>
 8001db0:	e014      	b.n	8001ddc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001db2:	f7fe ff63 	bl	8000c7c <HAL_GetTick>
 8001db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001db8:	e00a      	b.n	8001dd0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dba:	f7fe ff5f 	bl	8000c7c <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e0af      	b.n	8001f30 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dd0:	4b5a      	ldr	r3, [pc, #360]	; (8001f3c <HAL_RCC_OscConfig+0x4e8>)
 8001dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d1ee      	bne.n	8001dba <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ddc:	7dfb      	ldrb	r3, [r7, #23]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d105      	bne.n	8001dee <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001de2:	4a56      	ldr	r2, [pc, #344]	; (8001f3c <HAL_RCC_OscConfig+0x4e8>)
 8001de4:	4b55      	ldr	r3, [pc, #340]	; (8001f3c <HAL_RCC_OscConfig+0x4e8>)
 8001de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f000 809b 	beq.w	8001f2e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001df8:	4b50      	ldr	r3, [pc, #320]	; (8001f3c <HAL_RCC_OscConfig+0x4e8>)
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f003 030c 	and.w	r3, r3, #12
 8001e00:	2b08      	cmp	r3, #8
 8001e02:	d05c      	beq.n	8001ebe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d141      	bne.n	8001e90 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e0c:	4b4c      	ldr	r3, [pc, #304]	; (8001f40 <HAL_RCC_OscConfig+0x4ec>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e12:	f7fe ff33 	bl	8000c7c <HAL_GetTick>
 8001e16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e18:	e008      	b.n	8001e2c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e1a:	f7fe ff2f 	bl	8000c7c <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e081      	b.n	8001f30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e2c:	4b43      	ldr	r3, [pc, #268]	; (8001f3c <HAL_RCC_OscConfig+0x4e8>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d1f0      	bne.n	8001e1a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e38:	4940      	ldr	r1, [pc, #256]	; (8001f3c <HAL_RCC_OscConfig+0x4e8>)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	69da      	ldr	r2, [r3, #28]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a1b      	ldr	r3, [r3, #32]
 8001e42:	431a      	orrs	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e48:	019b      	lsls	r3, r3, #6
 8001e4a:	431a      	orrs	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e50:	085b      	lsrs	r3, r3, #1
 8001e52:	3b01      	subs	r3, #1
 8001e54:	041b      	lsls	r3, r3, #16
 8001e56:	431a      	orrs	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5c:	061b      	lsls	r3, r3, #24
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e62:	4b37      	ldr	r3, [pc, #220]	; (8001f40 <HAL_RCC_OscConfig+0x4ec>)
 8001e64:	2201      	movs	r2, #1
 8001e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e68:	f7fe ff08 	bl	8000c7c <HAL_GetTick>
 8001e6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e6e:	e008      	b.n	8001e82 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e70:	f7fe ff04 	bl	8000c7c <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e056      	b.n	8001f30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e82:	4b2e      	ldr	r3, [pc, #184]	; (8001f3c <HAL_RCC_OscConfig+0x4e8>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d0f0      	beq.n	8001e70 <HAL_RCC_OscConfig+0x41c>
 8001e8e:	e04e      	b.n	8001f2e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e90:	4b2b      	ldr	r3, [pc, #172]	; (8001f40 <HAL_RCC_OscConfig+0x4ec>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e96:	f7fe fef1 	bl	8000c7c <HAL_GetTick>
 8001e9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e9c:	e008      	b.n	8001eb0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e9e:	f7fe feed 	bl	8000c7c <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d901      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e03f      	b.n	8001f30 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eb0:	4b22      	ldr	r3, [pc, #136]	; (8001f3c <HAL_RCC_OscConfig+0x4e8>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d1f0      	bne.n	8001e9e <HAL_RCC_OscConfig+0x44a>
 8001ebc:	e037      	b.n	8001f2e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d101      	bne.n	8001eca <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e032      	b.n	8001f30 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001eca:	4b1c      	ldr	r3, [pc, #112]	; (8001f3c <HAL_RCC_OscConfig+0x4e8>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d028      	beq.n	8001f2a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d121      	bne.n	8001f2a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d11a      	bne.n	8001f2a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001efa:	4013      	ands	r3, r2
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f00:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d111      	bne.n	8001f2a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f10:	085b      	lsrs	r3, r3, #1
 8001f12:	3b01      	subs	r3, #1
 8001f14:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d107      	bne.n	8001f2a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f24:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d001      	beq.n	8001f2e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e000      	b.n	8001f30 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3718      	adds	r7, #24
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40007000 	.word	0x40007000
 8001f3c:	40023800 	.word	0x40023800
 8001f40:	42470060 	.word	0x42470060

08001f44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d101      	bne.n	8001f58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e0cc      	b.n	80020f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f58:	4b68      	ldr	r3, [pc, #416]	; (80020fc <HAL_RCC_ClockConfig+0x1b8>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0207 	and.w	r2, r3, #7
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d20c      	bcs.n	8001f80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f66:	4b65      	ldr	r3, [pc, #404]	; (80020fc <HAL_RCC_ClockConfig+0x1b8>)
 8001f68:	683a      	ldr	r2, [r7, #0]
 8001f6a:	b2d2      	uxtb	r2, r2
 8001f6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f6e:	4b63      	ldr	r3, [pc, #396]	; (80020fc <HAL_RCC_ClockConfig+0x1b8>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0207 	and.w	r2, r3, #7
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d001      	beq.n	8001f80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e0b8      	b.n	80020f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d020      	beq.n	8001fce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0304 	and.w	r3, r3, #4
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d005      	beq.n	8001fa4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f98:	4a59      	ldr	r2, [pc, #356]	; (8002100 <HAL_RCC_ClockConfig+0x1bc>)
 8001f9a:	4b59      	ldr	r3, [pc, #356]	; (8002100 <HAL_RCC_ClockConfig+0x1bc>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001fa2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0308 	and.w	r3, r3, #8
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d005      	beq.n	8001fbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fb0:	4a53      	ldr	r2, [pc, #332]	; (8002100 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb2:	4b53      	ldr	r3, [pc, #332]	; (8002100 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001fba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fbc:	4950      	ldr	r1, [pc, #320]	; (8002100 <HAL_RCC_ClockConfig+0x1bc>)
 8001fbe:	4b50      	ldr	r3, [pc, #320]	; (8002100 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d044      	beq.n	8002064 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d107      	bne.n	8001ff2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fe2:	4b47      	ldr	r3, [pc, #284]	; (8002100 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d119      	bne.n	8002022 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e07f      	b.n	80020f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d003      	beq.n	8002002 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ffe:	2b03      	cmp	r3, #3
 8002000:	d107      	bne.n	8002012 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002002:	4b3f      	ldr	r3, [pc, #252]	; (8002100 <HAL_RCC_ClockConfig+0x1bc>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d109      	bne.n	8002022 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e06f      	b.n	80020f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002012:	4b3b      	ldr	r3, [pc, #236]	; (8002100 <HAL_RCC_ClockConfig+0x1bc>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d101      	bne.n	8002022 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e067      	b.n	80020f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002022:	4937      	ldr	r1, [pc, #220]	; (8002100 <HAL_RCC_ClockConfig+0x1bc>)
 8002024:	4b36      	ldr	r3, [pc, #216]	; (8002100 <HAL_RCC_ClockConfig+0x1bc>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f023 0203 	bic.w	r2, r3, #3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	4313      	orrs	r3, r2
 8002032:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002034:	f7fe fe22 	bl	8000c7c <HAL_GetTick>
 8002038:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800203a:	e00a      	b.n	8002052 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800203c:	f7fe fe1e 	bl	8000c7c <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	f241 3288 	movw	r2, #5000	; 0x1388
 800204a:	4293      	cmp	r3, r2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e04f      	b.n	80020f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002052:	4b2b      	ldr	r3, [pc, #172]	; (8002100 <HAL_RCC_ClockConfig+0x1bc>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f003 020c 	and.w	r2, r3, #12
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	429a      	cmp	r2, r3
 8002062:	d1eb      	bne.n	800203c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002064:	4b25      	ldr	r3, [pc, #148]	; (80020fc <HAL_RCC_ClockConfig+0x1b8>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0207 	and.w	r2, r3, #7
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	429a      	cmp	r2, r3
 8002070:	d90c      	bls.n	800208c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002072:	4b22      	ldr	r3, [pc, #136]	; (80020fc <HAL_RCC_ClockConfig+0x1b8>)
 8002074:	683a      	ldr	r2, [r7, #0]
 8002076:	b2d2      	uxtb	r2, r2
 8002078:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800207a:	4b20      	ldr	r3, [pc, #128]	; (80020fc <HAL_RCC_ClockConfig+0x1b8>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0207 	and.w	r2, r3, #7
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	429a      	cmp	r2, r3
 8002086:	d001      	beq.n	800208c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e032      	b.n	80020f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0304 	and.w	r3, r3, #4
 8002094:	2b00      	cmp	r3, #0
 8002096:	d008      	beq.n	80020aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002098:	4919      	ldr	r1, [pc, #100]	; (8002100 <HAL_RCC_ClockConfig+0x1bc>)
 800209a:	4b19      	ldr	r3, [pc, #100]	; (8002100 <HAL_RCC_ClockConfig+0x1bc>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0308 	and.w	r3, r3, #8
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d009      	beq.n	80020ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020b6:	4912      	ldr	r1, [pc, #72]	; (8002100 <HAL_RCC_ClockConfig+0x1bc>)
 80020b8:	4b11      	ldr	r3, [pc, #68]	; (8002100 <HAL_RCC_ClockConfig+0x1bc>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	4313      	orrs	r3, r2
 80020c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020ca:	f000 f821 	bl	8002110 <HAL_RCC_GetSysClockFreq>
 80020ce:	4601      	mov	r1, r0
 80020d0:	4b0b      	ldr	r3, [pc, #44]	; (8002100 <HAL_RCC_ClockConfig+0x1bc>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	091b      	lsrs	r3, r3, #4
 80020d6:	f003 030f 	and.w	r3, r3, #15
 80020da:	4a0a      	ldr	r2, [pc, #40]	; (8002104 <HAL_RCC_ClockConfig+0x1c0>)
 80020dc:	5cd3      	ldrb	r3, [r2, r3]
 80020de:	fa21 f303 	lsr.w	r3, r1, r3
 80020e2:	4a09      	ldr	r2, [pc, #36]	; (8002108 <HAL_RCC_ClockConfig+0x1c4>)
 80020e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80020e6:	4b09      	ldr	r3, [pc, #36]	; (800210c <HAL_RCC_ClockConfig+0x1c8>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7fe fd82 	bl	8000bf4 <HAL_InitTick>

  return HAL_OK;
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3710      	adds	r7, #16
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	40023c00 	.word	0x40023c00
 8002100:	40023800 	.word	0x40023800
 8002104:	08003a04 	.word	0x08003a04
 8002108:	20000000 	.word	0x20000000
 800210c:	20000004 	.word	0x20000004

08002110 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002114:	b087      	sub	sp, #28
 8002116:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002118:	2200      	movs	r2, #0
 800211a:	60fa      	str	r2, [r7, #12]
 800211c:	2200      	movs	r2, #0
 800211e:	617a      	str	r2, [r7, #20]
 8002120:	2200      	movs	r2, #0
 8002122:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0U;
 8002124:	2200      	movs	r2, #0
 8002126:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002128:	4a51      	ldr	r2, [pc, #324]	; (8002270 <HAL_RCC_GetSysClockFreq+0x160>)
 800212a:	6892      	ldr	r2, [r2, #8]
 800212c:	f002 020c 	and.w	r2, r2, #12
 8002130:	2a04      	cmp	r2, #4
 8002132:	d007      	beq.n	8002144 <HAL_RCC_GetSysClockFreq+0x34>
 8002134:	2a08      	cmp	r2, #8
 8002136:	d008      	beq.n	800214a <HAL_RCC_GetSysClockFreq+0x3a>
 8002138:	2a00      	cmp	r2, #0
 800213a:	f040 8090 	bne.w	800225e <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800213e:	4b4d      	ldr	r3, [pc, #308]	; (8002274 <HAL_RCC_GetSysClockFreq+0x164>)
 8002140:	613b      	str	r3, [r7, #16]
       break;
 8002142:	e08f      	b.n	8002264 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002144:	4b4c      	ldr	r3, [pc, #304]	; (8002278 <HAL_RCC_GetSysClockFreq+0x168>)
 8002146:	613b      	str	r3, [r7, #16]
      break;
 8002148:	e08c      	b.n	8002264 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800214a:	4a49      	ldr	r2, [pc, #292]	; (8002270 <HAL_RCC_GetSysClockFreq+0x160>)
 800214c:	6852      	ldr	r2, [r2, #4]
 800214e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8002152:	60fa      	str	r2, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002154:	4a46      	ldr	r2, [pc, #280]	; (8002270 <HAL_RCC_GetSysClockFreq+0x160>)
 8002156:	6852      	ldr	r2, [r2, #4]
 8002158:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 800215c:	2a00      	cmp	r2, #0
 800215e:	d023      	beq.n	80021a8 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002160:	4b43      	ldr	r3, [pc, #268]	; (8002270 <HAL_RCC_GetSysClockFreq+0x160>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	099b      	lsrs	r3, r3, #6
 8002166:	f04f 0400 	mov.w	r4, #0
 800216a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800216e:	f04f 0200 	mov.w	r2, #0
 8002172:	ea03 0301 	and.w	r3, r3, r1
 8002176:	ea04 0402 	and.w	r4, r4, r2
 800217a:	4a3f      	ldr	r2, [pc, #252]	; (8002278 <HAL_RCC_GetSysClockFreq+0x168>)
 800217c:	fb02 f104 	mul.w	r1, r2, r4
 8002180:	2200      	movs	r2, #0
 8002182:	fb02 f203 	mul.w	r2, r2, r3
 8002186:	440a      	add	r2, r1
 8002188:	493b      	ldr	r1, [pc, #236]	; (8002278 <HAL_RCC_GetSysClockFreq+0x168>)
 800218a:	fba3 0101 	umull	r0, r1, r3, r1
 800218e:	1853      	adds	r3, r2, r1
 8002190:	4619      	mov	r1, r3
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	f04f 0400 	mov.w	r4, #0
 8002198:	461a      	mov	r2, r3
 800219a:	4623      	mov	r3, r4
 800219c:	f7fe f81e 	bl	80001dc <__aeabi_uldivmod>
 80021a0:	4603      	mov	r3, r0
 80021a2:	460c      	mov	r4, r1
 80021a4:	617b      	str	r3, [r7, #20]
 80021a6:	e04c      	b.n	8002242 <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021a8:	4a31      	ldr	r2, [pc, #196]	; (8002270 <HAL_RCC_GetSysClockFreq+0x160>)
 80021aa:	6852      	ldr	r2, [r2, #4]
 80021ac:	0992      	lsrs	r2, r2, #6
 80021ae:	4611      	mov	r1, r2
 80021b0:	f04f 0200 	mov.w	r2, #0
 80021b4:	f240 15ff 	movw	r5, #511	; 0x1ff
 80021b8:	f04f 0600 	mov.w	r6, #0
 80021bc:	ea05 0501 	and.w	r5, r5, r1
 80021c0:	ea06 0602 	and.w	r6, r6, r2
 80021c4:	4629      	mov	r1, r5
 80021c6:	4632      	mov	r2, r6
 80021c8:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 80021cc:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 80021d0:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 80021d4:	4651      	mov	r1, sl
 80021d6:	465a      	mov	r2, fp
 80021d8:	46aa      	mov	sl, r5
 80021da:	46b3      	mov	fp, r6
 80021dc:	4655      	mov	r5, sl
 80021de:	465e      	mov	r6, fp
 80021e0:	1b4d      	subs	r5, r1, r5
 80021e2:	eb62 0606 	sbc.w	r6, r2, r6
 80021e6:	4629      	mov	r1, r5
 80021e8:	4632      	mov	r2, r6
 80021ea:	0194      	lsls	r4, r2, #6
 80021ec:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80021f0:	018b      	lsls	r3, r1, #6
 80021f2:	1a5b      	subs	r3, r3, r1
 80021f4:	eb64 0402 	sbc.w	r4, r4, r2
 80021f8:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 80021fc:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8002200:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8002204:	4643      	mov	r3, r8
 8002206:	464c      	mov	r4, r9
 8002208:	4655      	mov	r5, sl
 800220a:	465e      	mov	r6, fp
 800220c:	18ed      	adds	r5, r5, r3
 800220e:	eb46 0604 	adc.w	r6, r6, r4
 8002212:	462b      	mov	r3, r5
 8002214:	4634      	mov	r4, r6
 8002216:	02a2      	lsls	r2, r4, #10
 8002218:	607a      	str	r2, [r7, #4]
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002220:	607a      	str	r2, [r7, #4]
 8002222:	029b      	lsls	r3, r3, #10
 8002224:	603b      	str	r3, [r7, #0]
 8002226:	e897 0018 	ldmia.w	r7, {r3, r4}
 800222a:	4618      	mov	r0, r3
 800222c:	4621      	mov	r1, r4
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	f04f 0400 	mov.w	r4, #0
 8002234:	461a      	mov	r2, r3
 8002236:	4623      	mov	r3, r4
 8002238:	f7fd ffd0 	bl	80001dc <__aeabi_uldivmod>
 800223c:	4603      	mov	r3, r0
 800223e:	460c      	mov	r4, r1
 8002240:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002242:	4b0b      	ldr	r3, [pc, #44]	; (8002270 <HAL_RCC_GetSysClockFreq+0x160>)
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	0c1b      	lsrs	r3, r3, #16
 8002248:	f003 0303 	and.w	r3, r3, #3
 800224c:	3301      	adds	r3, #1
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002252:	697a      	ldr	r2, [r7, #20]
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	fbb2 f3f3 	udiv	r3, r2, r3
 800225a:	613b      	str	r3, [r7, #16]
      break;
 800225c:	e002      	b.n	8002264 <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800225e:	4b05      	ldr	r3, [pc, #20]	; (8002274 <HAL_RCC_GetSysClockFreq+0x164>)
 8002260:	613b      	str	r3, [r7, #16]
      break;
 8002262:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002264:	693b      	ldr	r3, [r7, #16]
}
 8002266:	4618      	mov	r0, r3
 8002268:	371c      	adds	r7, #28
 800226a:	46bd      	mov	sp, r7
 800226c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002270:	40023800 	.word	0x40023800
 8002274:	00f42400 	.word	0x00f42400
 8002278:	017d7840 	.word	0x017d7840

0800227c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002280:	4b03      	ldr	r3, [pc, #12]	; (8002290 <HAL_RCC_GetHCLKFreq+0x14>)
 8002282:	681b      	ldr	r3, [r3, #0]
}
 8002284:	4618      	mov	r0, r3
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	20000000 	.word	0x20000000

08002294 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002298:	f7ff fff0 	bl	800227c <HAL_RCC_GetHCLKFreq>
 800229c:	4601      	mov	r1, r0
 800229e:	4b05      	ldr	r3, [pc, #20]	; (80022b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	0a9b      	lsrs	r3, r3, #10
 80022a4:	f003 0307 	and.w	r3, r3, #7
 80022a8:	4a03      	ldr	r2, [pc, #12]	; (80022b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022aa:	5cd3      	ldrb	r3, [r2, r3]
 80022ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	40023800 	.word	0x40023800
 80022b8:	08003a14 	.word	0x08003a14

080022bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80022c0:	f7ff ffdc 	bl	800227c <HAL_RCC_GetHCLKFreq>
 80022c4:	4601      	mov	r1, r0
 80022c6:	4b05      	ldr	r3, [pc, #20]	; (80022dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	0b5b      	lsrs	r3, r3, #13
 80022cc:	f003 0307 	and.w	r3, r3, #7
 80022d0:	4a03      	ldr	r2, [pc, #12]	; (80022e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022d2:	5cd3      	ldrb	r3, [r2, r3]
 80022d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80022d8:	4618      	mov	r0, r3
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	40023800 	.word	0x40023800
 80022e0:	08003a14 	.word	0x08003a14

080022e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e03f      	b.n	8002376 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d106      	bne.n	8002310 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f7fe fbce 	bl	8000aac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2224      	movs	r2, #36	; 0x24
 8002314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	6812      	ldr	r2, [r2, #0]
 8002320:	68d2      	ldr	r2, [r2, #12]
 8002322:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002326:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f000 ff9b 	bl	8003264 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	6812      	ldr	r2, [r2, #0]
 8002336:	6912      	ldr	r2, [r2, #16]
 8002338:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800233c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	6812      	ldr	r2, [r2, #0]
 8002346:	6952      	ldr	r2, [r2, #20]
 8002348:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800234c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	6812      	ldr	r2, [r2, #0]
 8002356:	68d2      	ldr	r2, [r2, #12]
 8002358:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800235c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2220      	movs	r2, #32
 8002368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2220      	movs	r2, #32
 8002370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800237e:	b580      	push	{r7, lr}
 8002380:	b08a      	sub	sp, #40	; 0x28
 8002382:	af02      	add	r7, sp, #8
 8002384:	60f8      	str	r0, [r7, #12]
 8002386:	60b9      	str	r1, [r7, #8]
 8002388:	603b      	str	r3, [r7, #0]
 800238a:	4613      	mov	r3, r2
 800238c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800238e:	2300      	movs	r3, #0
 8002390:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b20      	cmp	r3, #32
 800239c:	d17b      	bne.n	8002496 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d002      	beq.n	80023aa <HAL_UART_Transmit+0x2c>
 80023a4:	88fb      	ldrh	r3, [r7, #6]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e074      	b.n	8002498 <HAL_UART_Transmit+0x11a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d101      	bne.n	80023bc <HAL_UART_Transmit+0x3e>
 80023b8:	2302      	movs	r3, #2
 80023ba:	e06d      	b.n	8002498 <HAL_UART_Transmit+0x11a>
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2200      	movs	r2, #0
 80023c8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2221      	movs	r2, #33	; 0x21
 80023ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023d2:	f7fe fc53 	bl	8000c7c <HAL_GetTick>
 80023d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	88fa      	ldrh	r2, [r7, #6]
 80023dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	88fa      	ldrh	r2, [r7, #6]
 80023e2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023ec:	d108      	bne.n	8002400 <HAL_UART_Transmit+0x82>
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d104      	bne.n	8002400 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80023f6:	2300      	movs	r3, #0
 80023f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	61bb      	str	r3, [r7, #24]
 80023fe:	e003      	b.n	8002408 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002404:	2300      	movs	r3, #0
 8002406:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002410:	e029      	b.n	8002466 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	9300      	str	r3, [sp, #0]
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	2200      	movs	r2, #0
 800241a:	2180      	movs	r1, #128	; 0x80
 800241c:	68f8      	ldr	r0, [r7, #12]
 800241e:	f000 fc53 	bl	8002cc8 <UART_WaitOnFlagUntilTimeout>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e035      	b.n	8002498 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d10a      	bne.n	8002448 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	8812      	ldrh	r2, [r2, #0]
 800243a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800243e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	3302      	adds	r3, #2
 8002444:	61bb      	str	r3, [r7, #24]
 8002446:	e007      	b.n	8002458 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	69fa      	ldr	r2, [r7, #28]
 800244e:	7812      	ldrb	r2, [r2, #0]
 8002450:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	3301      	adds	r3, #1
 8002456:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800245c:	b29b      	uxth	r3, r3
 800245e:	3b01      	subs	r3, #1
 8002460:	b29a      	uxth	r2, r3
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800246a:	b29b      	uxth	r3, r3
 800246c:	2b00      	cmp	r3, #0
 800246e:	d1d0      	bne.n	8002412 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	9300      	str	r3, [sp, #0]
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	2200      	movs	r2, #0
 8002478:	2140      	movs	r1, #64	; 0x40
 800247a:	68f8      	ldr	r0, [r7, #12]
 800247c:	f000 fc24 	bl	8002cc8 <UART_WaitOnFlagUntilTimeout>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <HAL_UART_Transmit+0x10c>
    {
      return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e006      	b.n	8002498 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2220      	movs	r2, #32
 800248e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002492:	2300      	movs	r3, #0
 8002494:	e000      	b.n	8002498 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8002496:	2302      	movs	r3, #2
  }
}
 8002498:	4618      	mov	r0, r3
 800249a:	3720      	adds	r7, #32
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b08c      	sub	sp, #48	; 0x30
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	4613      	mov	r3, r2
 80024ac:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b20      	cmp	r3, #32
 80024b8:	d152      	bne.n	8002560 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d002      	beq.n	80024c6 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80024c0:	88fb      	ldrh	r3, [r7, #6]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e04b      	b.n	8002562 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d101      	bne.n	80024d8 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80024d4:	2302      	movs	r3, #2
 80024d6:	e044      	b.n	8002562 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2201      	movs	r2, #1
 80024e4:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80024e6:	88fb      	ldrh	r3, [r7, #6]
 80024e8:	461a      	mov	r2, r3
 80024ea:	68b9      	ldr	r1, [r7, #8]
 80024ec:	68f8      	ldr	r0, [r7, #12]
 80024ee:	f000 fc59 	bl	8002da4 <UART_Start_Receive_DMA>
 80024f2:	4603      	mov	r3, r0
 80024f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80024f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d12c      	bne.n	800255a <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002504:	2b01      	cmp	r3, #1
 8002506:	d125      	bne.n	8002554 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002508:	2300      	movs	r3, #0
 800250a:	613b      	str	r3, [r7, #16]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	613b      	str	r3, [r7, #16]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	613b      	str	r3, [r7, #16]
 800251c:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	330c      	adds	r3, #12
 8002524:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	e853 3f00 	ldrex	r3, [r3]
 800252c:	617b      	str	r3, [r7, #20]
   return(result);
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	f043 0310 	orr.w	r3, r3, #16
 8002534:	62bb      	str	r3, [r7, #40]	; 0x28
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	330c      	adds	r3, #12
 800253c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800253e:	627a      	str	r2, [r7, #36]	; 0x24
 8002540:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002542:	6a39      	ldr	r1, [r7, #32]
 8002544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002546:	e841 2300 	strex	r3, r2, [r1]
 800254a:	61fb      	str	r3, [r7, #28]
   return(result);
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1e5      	bne.n	800251e <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8002552:	e002      	b.n	800255a <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800255a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800255e:	e000      	b.n	8002562 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8002560:	2302      	movs	r3, #2
  }
}
 8002562:	4618      	mov	r0, r3
 8002564:	3730      	adds	r7, #48	; 0x30
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
	...

0800256c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b0ba      	sub	sp, #232	; 0xe8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002592:	2300      	movs	r3, #0
 8002594:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002598:	2300      	movs	r3, #0
 800259a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800259e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025a2:	f003 030f 	and.w	r3, r3, #15
 80025a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80025aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d10f      	bne.n	80025d2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025b6:	f003 0320 	and.w	r3, r3, #32
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d009      	beq.n	80025d2 <HAL_UART_IRQHandler+0x66>
 80025be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025c2:	f003 0320 	and.w	r3, r3, #32
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d003      	beq.n	80025d2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 fd8e 	bl	80030ec <UART_Receive_IT>
      return;
 80025d0:	e257      	b.n	8002a82 <HAL_UART_IRQHandler+0x516>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80025d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	f000 80de 	beq.w	8002798 <HAL_UART_IRQHandler+0x22c>
 80025dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025e0:	f003 0301 	and.w	r3, r3, #1
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d106      	bne.n	80025f6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80025e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025ec:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	f000 80d1 	beq.w	8002798 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80025f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00b      	beq.n	800261a <HAL_UART_IRQHandler+0xae>
 8002602:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260a:	2b00      	cmp	r3, #0
 800260c:	d005      	beq.n	800261a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002612:	f043 0201 	orr.w	r2, r3, #1
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800261a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800261e:	f003 0304 	and.w	r3, r3, #4
 8002622:	2b00      	cmp	r3, #0
 8002624:	d00b      	beq.n	800263e <HAL_UART_IRQHandler+0xd2>
 8002626:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	2b00      	cmp	r3, #0
 8002630:	d005      	beq.n	800263e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002636:	f043 0202 	orr.w	r2, r3, #2
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800263e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00b      	beq.n	8002662 <HAL_UART_IRQHandler+0xf6>
 800264a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	2b00      	cmp	r3, #0
 8002654:	d005      	beq.n	8002662 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265a:	f043 0204 	orr.w	r2, r3, #4
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002666:	f003 0308 	and.w	r3, r3, #8
 800266a:	2b00      	cmp	r3, #0
 800266c:	d011      	beq.n	8002692 <HAL_UART_IRQHandler+0x126>
 800266e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002672:	f003 0320 	and.w	r3, r3, #32
 8002676:	2b00      	cmp	r3, #0
 8002678:	d105      	bne.n	8002686 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800267a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	2b00      	cmp	r3, #0
 8002684:	d005      	beq.n	8002692 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268a:	f043 0208 	orr.w	r2, r3, #8
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	2b00      	cmp	r3, #0
 8002698:	f000 81ee 	beq.w	8002a78 <HAL_UART_IRQHandler+0x50c>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800269c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026a0:	f003 0320 	and.w	r3, r3, #32
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d008      	beq.n	80026ba <HAL_UART_IRQHandler+0x14e>
 80026a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026ac:	f003 0320 	and.w	r3, r3, #32
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d002      	beq.n	80026ba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f000 fd19 	bl	80030ec <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026c4:	2b40      	cmp	r3, #64	; 0x40
 80026c6:	bf0c      	ite	eq
 80026c8:	2301      	moveq	r3, #1
 80026ca:	2300      	movne	r3, #0
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d6:	f003 0308 	and.w	r3, r3, #8
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d103      	bne.n	80026e6 <HAL_UART_IRQHandler+0x17a>
 80026de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d04f      	beq.n	8002786 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 fc22 	bl	8002f30 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026f6:	2b40      	cmp	r3, #64	; 0x40
 80026f8:	d141      	bne.n	800277e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	3314      	adds	r3, #20
 8002700:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002704:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002708:	e853 3f00 	ldrex	r3, [r3]
 800270c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002710:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002714:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002718:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	3314      	adds	r3, #20
 8002722:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002726:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800272a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800272e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002732:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002736:	e841 2300 	strex	r3, r2, [r1]
 800273a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800273e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1d9      	bne.n	80026fa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800274a:	2b00      	cmp	r3, #0
 800274c:	d013      	beq.n	8002776 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002752:	4a7d      	ldr	r2, [pc, #500]	; (8002948 <HAL_UART_IRQHandler+0x3dc>)
 8002754:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800275a:	4618      	mov	r0, r3
 800275c:	f7fe fd3c 	bl	80011d8 <HAL_DMA_Abort_IT>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d016      	beq.n	8002794 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800276a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002770:	4610      	mov	r0, r2
 8002772:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002774:	e00e      	b.n	8002794 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 f9a4 	bl	8002ac4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800277c:	e00a      	b.n	8002794 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 f9a0 	bl	8002ac4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002784:	e006      	b.n	8002794 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f000 f99c 	bl	8002ac4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002792:	e171      	b.n	8002a78 <HAL_UART_IRQHandler+0x50c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002794:	bf00      	nop
    return;
 8002796:	e16f      	b.n	8002a78 <HAL_UART_IRQHandler+0x50c>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279c:	2b01      	cmp	r3, #1
 800279e:	f040 814a 	bne.w	8002a36 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80027a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027a6:	f003 0310 	and.w	r3, r3, #16
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	f000 8143 	beq.w	8002a36 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80027b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027b4:	f003 0310 	and.w	r3, r3, #16
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f000 813c 	beq.w	8002a36 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80027be:	2300      	movs	r3, #0
 80027c0:	60bb      	str	r3, [r7, #8]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	60bb      	str	r3, [r7, #8]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	60bb      	str	r3, [r7, #8]
 80027d2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027de:	2b40      	cmp	r3, #64	; 0x40
 80027e0:	f040 80b4 	bne.w	800294c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((nb_remaining_rx_data > 0U)
 80027f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f000 8141 	beq.w	8002a7c <HAL_UART_IRQHandler+0x510>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80027fe:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8002802:	429a      	cmp	r2, r3
 8002804:	f080 813a 	bcs.w	8002a7c <HAL_UART_IRQHandler+0x510>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800280e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002814:	69db      	ldr	r3, [r3, #28]
 8002816:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800281a:	f000 8088 	beq.w	800292e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	330c      	adds	r3, #12
 8002824:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002828:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800282c:	e853 3f00 	ldrex	r3, [r3]
 8002830:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002834:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002838:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800283c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	330c      	adds	r3, #12
 8002846:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800284a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800284e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002852:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002856:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800285a:	e841 2300 	strex	r3, r2, [r1]
 800285e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002862:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002866:	2b00      	cmp	r3, #0
 8002868:	d1d9      	bne.n	800281e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	3314      	adds	r3, #20
 8002870:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002872:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002874:	e853 3f00 	ldrex	r3, [r3]
 8002878:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800287a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800287c:	f023 0301 	bic.w	r3, r3, #1
 8002880:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	3314      	adds	r3, #20
 800288a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800288e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002892:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002894:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002896:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800289a:	e841 2300 	strex	r3, r2, [r1]
 800289e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80028a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1e1      	bne.n	800286a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	3314      	adds	r3, #20
 80028ac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028b0:	e853 3f00 	ldrex	r3, [r3]
 80028b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80028b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	3314      	adds	r3, #20
 80028c6:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80028ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 80028cc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028ce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80028d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80028d2:	e841 2300 	strex	r3, r2, [r1]
 80028d6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80028d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1e3      	bne.n	80028a6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2220      	movs	r2, #32
 80028e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	330c      	adds	r3, #12
 80028f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028f6:	e853 3f00 	ldrex	r3, [r3]
 80028fa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80028fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028fe:	f023 0310 	bic.w	r3, r3, #16
 8002902:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	330c      	adds	r3, #12
 800290c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002910:	65ba      	str	r2, [r7, #88]	; 0x58
 8002912:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002914:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002916:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002918:	e841 2300 	strex	r3, r2, [r1]
 800291c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800291e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002920:	2b00      	cmp	r3, #0
 8002922:	d1e3      	bne.n	80028ec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002928:	4618      	mov	r0, r3
 800292a:	f7fe fbe5 	bl	80010f8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002936:	b29b      	uxth	r3, r3
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	b29b      	uxth	r3, r3
 800293c:	4619      	mov	r1, r3
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f7fd fe38 	bl	80005b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002944:	e09a      	b.n	8002a7c <HAL_UART_IRQHandler+0x510>
 8002946:	bf00      	nop
 8002948:	08002ff7 	.word	0x08002ff7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002954:	b29b      	uxth	r3, r3
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
      if ((huart->RxXferCount > 0U)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002960:	b29b      	uxth	r3, r3
 8002962:	2b00      	cmp	r3, #0
 8002964:	f000 808c 	beq.w	8002a80 <HAL_UART_IRQHandler+0x514>
          && (nb_rx_data > 0U))
 8002968:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 800296c:	2b00      	cmp	r3, #0
 800296e:	f000 8087 	beq.w	8002a80 <HAL_UART_IRQHandler+0x514>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	330c      	adds	r3, #12
 8002978:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800297a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800297c:	e853 3f00 	ldrex	r3, [r3]
 8002980:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002984:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002988:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	330c      	adds	r3, #12
 8002992:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002996:	647a      	str	r2, [r7, #68]	; 0x44
 8002998:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800299a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800299c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800299e:	e841 2300 	strex	r3, r2, [r1]
 80029a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80029a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d1e3      	bne.n	8002972 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	3314      	adds	r3, #20
 80029b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b4:	e853 3f00 	ldrex	r3, [r3]
 80029b8:	623b      	str	r3, [r7, #32]
   return(result);
 80029ba:	6a3b      	ldr	r3, [r7, #32]
 80029bc:	f023 0301 	bic.w	r3, r3, #1
 80029c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	3314      	adds	r3, #20
 80029ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80029ce:	633a      	str	r2, [r7, #48]	; 0x30
 80029d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80029d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029d6:	e841 2300 	strex	r3, r2, [r1]
 80029da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80029dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1e3      	bne.n	80029aa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2220      	movs	r2, #32
 80029e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	330c      	adds	r3, #12
 80029f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	e853 3f00 	ldrex	r3, [r3]
 80029fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f023 0310 	bic.w	r3, r3, #16
 8002a06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	330c      	adds	r3, #12
 8002a10:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002a14:	61fa      	str	r2, [r7, #28]
 8002a16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a18:	69b9      	ldr	r1, [r7, #24]
 8002a1a:	69fa      	ldr	r2, [r7, #28]
 8002a1c:	e841 2300 	strex	r3, r2, [r1]
 8002a20:	617b      	str	r3, [r7, #20]
   return(result);
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d1e3      	bne.n	80029f0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002a28:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f7fd fdc0 	bl	80005b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002a34:	e024      	b.n	8002a80 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d009      	beq.n	8002a56 <HAL_UART_IRQHandler+0x4ea>
 8002a42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d003      	beq.n	8002a56 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 fae5 	bl	800301e <UART_Transmit_IT>
    return;
 8002a54:	e015      	b.n	8002a82 <HAL_UART_IRQHandler+0x516>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00f      	beq.n	8002a82 <HAL_UART_IRQHandler+0x516>
 8002a62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d009      	beq.n	8002a82 <HAL_UART_IRQHandler+0x516>
  {
    UART_EndTransmit_IT(huart);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 fb24 	bl	80030bc <UART_EndTransmit_IT>
    return;
 8002a74:	bf00      	nop
 8002a76:	e004      	b.n	8002a82 <HAL_UART_IRQHandler+0x516>
    return;
 8002a78:	bf00      	nop
 8002a7a:	e002      	b.n	8002a82 <HAL_UART_IRQHandler+0x516>
      return;
 8002a7c:	bf00      	nop
 8002a7e:	e000      	b.n	8002a82 <HAL_UART_IRQHandler+0x516>
      return;
 8002a80:	bf00      	nop
  }
}
 8002a82:	37e8      	adds	r7, #232	; 0xe8
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002a90:	bf00      	nop
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002aa4:	bf00      	nop
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002acc:	bf00      	nop
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b09c      	sub	sp, #112	; 0x70
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae4:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d172      	bne.n	8002bda <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8002af4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002af6:	2200      	movs	r2, #0
 8002af8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002afa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	330c      	adds	r3, #12
 8002b00:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b04:	e853 3f00 	ldrex	r3, [r3]
 8002b08:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002b0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b10:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	330c      	adds	r3, #12
 8002b18:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002b1a:	65ba      	str	r2, [r7, #88]	; 0x58
 8002b1c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b1e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002b20:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002b22:	e841 2300 	strex	r3, r2, [r1]
 8002b26:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002b28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1e5      	bne.n	8002afa <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	3314      	adds	r3, #20
 8002b34:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b38:	e853 3f00 	ldrex	r3, [r3]
 8002b3c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b40:	f023 0301 	bic.w	r3, r3, #1
 8002b44:	667b      	str	r3, [r7, #100]	; 0x64
 8002b46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	3314      	adds	r3, #20
 8002b4c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002b4e:	647a      	str	r2, [r7, #68]	; 0x44
 8002b50:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b52:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002b54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b56:	e841 2300 	strex	r3, r2, [r1]
 8002b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002b5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1e5      	bne.n	8002b2e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	3314      	adds	r3, #20
 8002b68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6c:	e853 3f00 	ldrex	r3, [r3]
 8002b70:	623b      	str	r3, [r7, #32]
   return(result);
 8002b72:	6a3b      	ldr	r3, [r7, #32]
 8002b74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b78:	663b      	str	r3, [r7, #96]	; 0x60
 8002b7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	3314      	adds	r3, #20
 8002b80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002b82:	633a      	str	r2, [r7, #48]	; 0x30
 8002b84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002b88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b8a:	e841 2300 	strex	r3, r2, [r1]
 8002b8e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1e5      	bne.n	8002b62 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002b96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b98:	2220      	movs	r2, #32
 8002b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d119      	bne.n	8002bda <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ba6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	330c      	adds	r3, #12
 8002bac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	e853 3f00 	ldrex	r3, [r3]
 8002bb4:	60fb      	str	r3, [r7, #12]
   return(result);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f023 0310 	bic.w	r3, r3, #16
 8002bbc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002bbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	330c      	adds	r3, #12
 8002bc4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002bc6:	61fa      	str	r2, [r7, #28]
 8002bc8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bca:	69b9      	ldr	r1, [r7, #24]
 8002bcc:	69fa      	ldr	r2, [r7, #28]
 8002bce:	e841 2300 	strex	r3, r2, [r1]
 8002bd2:	617b      	str	r3, [r7, #20]
   return(result);
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1e5      	bne.n	8002ba6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d106      	bne.n	8002bf0 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002be2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002be4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002be6:	4619      	mov	r1, r3
 8002be8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002bea:	f7fd fce3 	bl	80005b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002bee:	e002      	b.n	8002bf6 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8002bf0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002bf2:	f7ff ff53 	bl	8002a9c <HAL_UART_RxCpltCallback>
}
 8002bf6:	bf00      	nop
 8002bf8:	3770      	adds	r7, #112	; 0x70
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b084      	sub	sp, #16
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c0a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d108      	bne.n	8002c26 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002c18:	085b      	lsrs	r3, r3, #1
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	f7fd fcc8 	bl	80005b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002c24:	e002      	b.n	8002c2c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8002c26:	68f8      	ldr	r0, [r7, #12]
 8002c28:	f7ff ff42 	bl	8002ab0 <HAL_UART_RxHalfCpltCallback>
}
 8002c2c:	bf00      	nop
 8002c2e:	3710      	adds	r7, #16
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c44:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	695b      	ldr	r3, [r3, #20]
 8002c4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c50:	2b80      	cmp	r3, #128	; 0x80
 8002c52:	bf0c      	ite	eq
 8002c54:	2301      	moveq	r3, #1
 8002c56:	2300      	movne	r3, #0
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	2b21      	cmp	r3, #33	; 0x21
 8002c66:	d108      	bne.n	8002c7a <UART_DMAError+0x46>
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d005      	beq.n	8002c7a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	2200      	movs	r2, #0
 8002c72:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002c74:	68b8      	ldr	r0, [r7, #8]
 8002c76:	f000 f933 	bl	8002ee0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	695b      	ldr	r3, [r3, #20]
 8002c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c84:	2b40      	cmp	r3, #64	; 0x40
 8002c86:	bf0c      	ite	eq
 8002c88:	2301      	moveq	r3, #1
 8002c8a:	2300      	movne	r3, #0
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	2b22      	cmp	r3, #34	; 0x22
 8002c9a:	d108      	bne.n	8002cae <UART_DMAError+0x7a>
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d005      	beq.n	8002cae <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002ca8:	68b8      	ldr	r0, [r7, #8]
 8002caa:	f000 f941 	bl	8002f30 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb2:	f043 0210 	orr.w	r2, r3, #16
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002cba:	68b8      	ldr	r0, [r7, #8]
 8002cbc:	f7ff ff02 	bl	8002ac4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002cc0:	bf00      	nop
 8002cc2:	3710      	adds	r7, #16
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b090      	sub	sp, #64	; 0x40
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	603b      	str	r3, [r7, #0]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cd8:	e050      	b.n	8002d7c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce0:	d04c      	beq.n	8002d7c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002ce2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d007      	beq.n	8002cf8 <UART_WaitOnFlagUntilTimeout+0x30>
 8002ce8:	f7fd ffc8 	bl	8000c7c <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	1ad2      	subs	r2, r2, r3
 8002cf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d941      	bls.n	8002d7c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	330c      	adds	r3, #12
 8002cfe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d02:	e853 3f00 	ldrex	r3, [r3]
 8002d06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	330c      	adds	r3, #12
 8002d16:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d18:	637a      	str	r2, [r7, #52]	; 0x34
 8002d1a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d20:	e841 2300 	strex	r3, r2, [r1]
 8002d24:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d1e5      	bne.n	8002cf8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	3314      	adds	r3, #20
 8002d32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	e853 3f00 	ldrex	r3, [r3]
 8002d3a:	613b      	str	r3, [r7, #16]
   return(result);
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	f023 0301 	bic.w	r3, r3, #1
 8002d42:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	3314      	adds	r3, #20
 8002d4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d4c:	623a      	str	r2, [r7, #32]
 8002d4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d50:	69f9      	ldr	r1, [r7, #28]
 8002d52:	6a3a      	ldr	r2, [r7, #32]
 8002d54:	e841 2300 	strex	r3, r2, [r1]
 8002d58:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d1e5      	bne.n	8002d2c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2220      	movs	r2, #32
 8002d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2220      	movs	r2, #32
 8002d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e00f      	b.n	8002d9c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	401a      	ands	r2, r3
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	bf0c      	ite	eq
 8002d8c:	2301      	moveq	r3, #1
 8002d8e:	2300      	movne	r3, #0
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	461a      	mov	r2, r3
 8002d94:	79fb      	ldrb	r3, [r7, #7]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d09f      	beq.n	8002cda <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3740      	adds	r7, #64	; 0x40
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b098      	sub	sp, #96	; 0x60
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	4613      	mov	r3, r2
 8002db0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002db2:	68ba      	ldr	r2, [r7, #8]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	88fa      	ldrh	r2, [r7, #6]
 8002dbc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2222      	movs	r2, #34	; 0x22
 8002dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd0:	4a40      	ldr	r2, [pc, #256]	; (8002ed4 <UART_Start_Receive_DMA+0x130>)
 8002dd2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd8:	4a3f      	ldr	r2, [pc, #252]	; (8002ed8 <UART_Start_Receive_DMA+0x134>)
 8002dda:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de0:	4a3e      	ldr	r2, [pc, #248]	; (8002edc <UART_Start_Receive_DMA+0x138>)
 8002de2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de8:	2200      	movs	r2, #0
 8002dea:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002dec:	f107 0308 	add.w	r3, r7, #8
 8002df0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	3304      	adds	r3, #4
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	88fb      	ldrh	r3, [r7, #6]
 8002e04:	f7fe f920 	bl	8001048 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002e08:	2300      	movs	r3, #0
 8002e0a:	613b      	str	r3, [r7, #16]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	613b      	str	r3, [r7, #16]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	613b      	str	r3, [r7, #16]
 8002e1c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d019      	beq.n	8002e62 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	330c      	adds	r3, #12
 8002e34:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e38:	e853 3f00 	ldrex	r3, [r3]
 8002e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002e3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e44:	65bb      	str	r3, [r7, #88]	; 0x58
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	330c      	adds	r3, #12
 8002e4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e4e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002e50:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e52:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002e54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e56:	e841 2300 	strex	r3, r2, [r1]
 8002e5a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8002e5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1e5      	bne.n	8002e2e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	3314      	adds	r3, #20
 8002e68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e6c:	e853 3f00 	ldrex	r3, [r3]
 8002e70:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e74:	f043 0301 	orr.w	r3, r3, #1
 8002e78:	657b      	str	r3, [r7, #84]	; 0x54
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	3314      	adds	r3, #20
 8002e80:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002e82:	63ba      	str	r2, [r7, #56]	; 0x38
 8002e84:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e86:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002e88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e8a:	e841 2300 	strex	r3, r2, [r1]
 8002e8e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1e5      	bne.n	8002e62 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	3314      	adds	r3, #20
 8002e9c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	e853 3f00 	ldrex	r3, [r3]
 8002ea4:	617b      	str	r3, [r7, #20]
   return(result);
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002eac:	653b      	str	r3, [r7, #80]	; 0x50
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	3314      	adds	r3, #20
 8002eb4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002eb6:	627a      	str	r2, [r7, #36]	; 0x24
 8002eb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eba:	6a39      	ldr	r1, [r7, #32]
 8002ebc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ebe:	e841 2300 	strex	r3, r2, [r1]
 8002ec2:	61fb      	str	r3, [r7, #28]
   return(result);
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1e5      	bne.n	8002e96 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3760      	adds	r7, #96	; 0x60
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	08002ad9 	.word	0x08002ad9
 8002ed8:	08002bff 	.word	0x08002bff
 8002edc:	08002c35 	.word	0x08002c35

08002ee0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b089      	sub	sp, #36	; 0x24
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	330c      	adds	r3, #12
 8002eee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	e853 3f00 	ldrex	r3, [r3]
 8002ef6:	60bb      	str	r3, [r7, #8]
   return(result);
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002efe:	61fb      	str	r3, [r7, #28]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	330c      	adds	r3, #12
 8002f06:	69fa      	ldr	r2, [r7, #28]
 8002f08:	61ba      	str	r2, [r7, #24]
 8002f0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f0c:	6979      	ldr	r1, [r7, #20]
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	e841 2300 	strex	r3, r2, [r1]
 8002f14:	613b      	str	r3, [r7, #16]
   return(result);
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d1e5      	bne.n	8002ee8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2220      	movs	r2, #32
 8002f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8002f24:	bf00      	nop
 8002f26:	3724      	adds	r7, #36	; 0x24
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b095      	sub	sp, #84	; 0x54
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	330c      	adds	r3, #12
 8002f3e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f42:	e853 3f00 	ldrex	r3, [r3]
 8002f46:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f4a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002f4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	330c      	adds	r3, #12
 8002f56:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f58:	643a      	str	r2, [r7, #64]	; 0x40
 8002f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f5c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002f5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002f60:	e841 2300 	strex	r3, r2, [r1]
 8002f64:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d1e5      	bne.n	8002f38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	3314      	adds	r3, #20
 8002f72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f74:	6a3b      	ldr	r3, [r7, #32]
 8002f76:	e853 3f00 	ldrex	r3, [r3]
 8002f7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	f023 0301 	bic.w	r3, r3, #1
 8002f82:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	3314      	adds	r3, #20
 8002f8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f8c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f94:	e841 2300 	strex	r3, r2, [r1]
 8002f98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d1e5      	bne.n	8002f6c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d119      	bne.n	8002fdc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	330c      	adds	r3, #12
 8002fae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	e853 3f00 	ldrex	r3, [r3]
 8002fb6:	60bb      	str	r3, [r7, #8]
   return(result);
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	f023 0310 	bic.w	r3, r3, #16
 8002fbe:	647b      	str	r3, [r7, #68]	; 0x44
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	330c      	adds	r3, #12
 8002fc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002fc8:	61ba      	str	r2, [r7, #24]
 8002fca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fcc:	6979      	ldr	r1, [r7, #20]
 8002fce:	69ba      	ldr	r2, [r7, #24]
 8002fd0:	e841 2300 	strex	r3, r2, [r1]
 8002fd4:	613b      	str	r3, [r7, #16]
   return(result);
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d1e5      	bne.n	8002fa8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2220      	movs	r2, #32
 8002fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002fea:	bf00      	nop
 8002fec:	3754      	adds	r7, #84	; 0x54
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr

08002ff6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b084      	sub	sp, #16
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003002:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003010:	68f8      	ldr	r0, [r7, #12]
 8003012:	f7ff fd57 	bl	8002ac4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003016:	bf00      	nop
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800301e:	b480      	push	{r7}
 8003020:	b085      	sub	sp, #20
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b21      	cmp	r3, #33	; 0x21
 8003030:	d13d      	bne.n	80030ae <UART_Transmit_IT+0x90>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800303a:	d113      	bne.n	8003064 <UART_Transmit_IT+0x46>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d10f      	bne.n	8003064 <UART_Transmit_IT+0x46>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a1b      	ldr	r3, [r3, #32]
 8003048:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	8812      	ldrh	r2, [r2, #0]
 8003052:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003056:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a1b      	ldr	r3, [r3, #32]
 800305c:	1c9a      	adds	r2, r3, #2
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	621a      	str	r2, [r3, #32]
 8003062:	e008      	b.n	8003076 <UART_Transmit_IT+0x58>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a1b      	ldr	r3, [r3, #32]
 800306c:	1c58      	adds	r0, r3, #1
 800306e:	6879      	ldr	r1, [r7, #4]
 8003070:	6208      	str	r0, [r1, #32]
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	6053      	str	r3, [r2, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800307a:	b29b      	uxth	r3, r3
 800307c:	3b01      	subs	r3, #1
 800307e:	b29b      	uxth	r3, r3
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	4619      	mov	r1, r3
 8003084:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003086:	2b00      	cmp	r3, #0
 8003088:	d10f      	bne.n	80030aa <UART_Transmit_IT+0x8c>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	6812      	ldr	r2, [r2, #0]
 8003092:	68d2      	ldr	r2, [r2, #12]
 8003094:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003098:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	6812      	ldr	r2, [r2, #0]
 80030a2:	68d2      	ldr	r2, [r2, #12]
 80030a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030a8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80030aa:	2300      	movs	r3, #0
 80030ac:	e000      	b.n	80030b0 <UART_Transmit_IT+0x92>
  }
  else
  {
    return HAL_BUSY;
 80030ae:	2302      	movs	r3, #2
  }
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3714      	adds	r7, #20
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	6812      	ldr	r2, [r2, #0]
 80030cc:	68d2      	ldr	r2, [r2, #12]
 80030ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030d2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2220      	movs	r2, #32
 80030d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f7ff fcd3 	bl	8002a88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3708      	adds	r7, #8
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b08c      	sub	sp, #48	; 0x30
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2b22      	cmp	r3, #34	; 0x22
 80030fe:	f040 80ab 	bne.w	8003258 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800310a:	d117      	bne.n	800313c <UART_Receive_IT+0x50>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	691b      	ldr	r3, [r3, #16]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d113      	bne.n	800313c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003114:	2300      	movs	r3, #0
 8003116:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	b29b      	uxth	r3, r3
 8003126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800312a:	b29a      	uxth	r2, r3
 800312c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800312e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003134:	1c9a      	adds	r2, r3, #2
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	629a      	str	r2, [r3, #40]	; 0x28
 800313a:	e026      	b.n	800318a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003140:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003142:	2300      	movs	r3, #0
 8003144:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800314e:	d007      	beq.n	8003160 <UART_Receive_IT+0x74>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d10a      	bne.n	800316e <UART_Receive_IT+0x82>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d106      	bne.n	800316e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	b2da      	uxtb	r2, r3
 8003168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800316a:	701a      	strb	r2, [r3, #0]
 800316c:	e008      	b.n	8003180 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	b2db      	uxtb	r3, r3
 8003176:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800317a:	b2da      	uxtb	r2, r3
 800317c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800317e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003184:	1c5a      	adds	r2, r3, #1
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800318e:	b29b      	uxth	r3, r3
 8003190:	3b01      	subs	r3, #1
 8003192:	b29b      	uxth	r3, r3
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	4619      	mov	r1, r3
 8003198:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800319a:	2b00      	cmp	r3, #0
 800319c:	d15a      	bne.n	8003254 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	6812      	ldr	r2, [r2, #0]
 80031a6:	68d2      	ldr	r2, [r2, #12]
 80031a8:	f022 0220 	bic.w	r2, r2, #32
 80031ac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	6812      	ldr	r2, [r2, #0]
 80031b6:	68d2      	ldr	r2, [r2, #12]
 80031b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031bc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	6812      	ldr	r2, [r2, #0]
 80031c6:	6952      	ldr	r2, [r2, #20]
 80031c8:	f022 0201 	bic.w	r2, r2, #1
 80031cc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2220      	movs	r2, #32
 80031d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d135      	bne.n	800324a <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	330c      	adds	r3, #12
 80031ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	e853 3f00 	ldrex	r3, [r3]
 80031f2:	613b      	str	r3, [r7, #16]
   return(result);
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	f023 0310 	bic.w	r3, r3, #16
 80031fa:	627b      	str	r3, [r7, #36]	; 0x24
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	330c      	adds	r3, #12
 8003202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003204:	623a      	str	r2, [r7, #32]
 8003206:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003208:	69f9      	ldr	r1, [r7, #28]
 800320a:	6a3a      	ldr	r2, [r7, #32]
 800320c:	e841 2300 	strex	r3, r2, [r1]
 8003210:	61bb      	str	r3, [r7, #24]
   return(result);
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1e5      	bne.n	80031e4 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0310 	and.w	r3, r3, #16
 8003222:	2b10      	cmp	r3, #16
 8003224:	d10a      	bne.n	800323c <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003226:	2300      	movs	r3, #0
 8003228:	60fb      	str	r3, [r7, #12]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	60fb      	str	r3, [r7, #12]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	60fb      	str	r3, [r7, #12]
 800323a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003240:	4619      	mov	r1, r3
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f7fd f9b6 	bl	80005b4 <HAL_UARTEx_RxEventCallback>
 8003248:	e002      	b.n	8003250 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f7ff fc26 	bl	8002a9c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003250:	2300      	movs	r3, #0
 8003252:	e002      	b.n	800325a <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003254:	2300      	movs	r3, #0
 8003256:	e000      	b.n	800325a <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003258:	2302      	movs	r3, #2
  }
}
 800325a:	4618      	mov	r0, r3
 800325c:	3730      	adds	r7, #48	; 0x30
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
	...

08003264 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003268:	b091      	sub	sp, #68	; 0x44
 800326a:	af00      	add	r7, sp, #0
 800326c:	6378      	str	r0, [r7, #52]	; 0x34
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800326e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003270:	6819      	ldr	r1, [r3, #0]
 8003272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	691b      	ldr	r3, [r3, #16]
 8003278:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800327c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	4313      	orrs	r3, r2
 8003282:	610b      	str	r3, [r1, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003286:	689a      	ldr	r2, [r3, #8]
 8003288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	431a      	orrs	r2, r3
 800328e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	431a      	orrs	r2, r3
 8003294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003296:	69db      	ldr	r3, [r3, #28]
 8003298:	4313      	orrs	r3, r2
 800329a:	63bb      	str	r3, [r7, #56]	; 0x38
  MODIFY_REG(huart->Instance->CR1,
 800329c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800329e:	6819      	ldr	r1, [r3, #0]
 80032a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	f423 4216 	bic.w	r2, r3, #38400	; 0x9600
 80032aa:	f022 020c 	bic.w	r2, r2, #12
 80032ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032b0:	4313      	orrs	r3, r2
 80032b2:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032b6:	6819      	ldr	r1, [r3, #0]
 80032b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	614b      	str	r3, [r1, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80032ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	4bba      	ldr	r3, [pc, #744]	; (80035b8 <UART_SetConfig+0x354>)
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d004      	beq.n	80032de <UART_SetConfig+0x7a>
 80032d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	4bb8      	ldr	r3, [pc, #736]	; (80035bc <UART_SetConfig+0x358>)
 80032da:	429a      	cmp	r2, r3
 80032dc:	d103      	bne.n	80032e6 <UART_SetConfig+0x82>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80032de:	f7fe ffed 	bl	80022bc <HAL_RCC_GetPCLK2Freq>
 80032e2:	63f8      	str	r0, [r7, #60]	; 0x3c
 80032e4:	e002      	b.n	80032ec <UART_SetConfig+0x88>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80032e6:	f7fe ffd5 	bl	8002294 <HAL_RCC_GetPCLK1Freq>
 80032ea:	63f8      	str	r0, [r7, #60]	; 0x3c
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032ee:	69db      	ldr	r3, [r3, #28]
 80032f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032f4:	f040 80a7 	bne.w	8003446 <UART_SetConfig+0x1e2>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80032f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	62ba      	str	r2, [r7, #40]	; 0x28
 80032fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003300:	4619      	mov	r1, r3
 8003302:	f04f 0200 	mov.w	r2, #0
 8003306:	460b      	mov	r3, r1
 8003308:	4614      	mov	r4, r2
 800330a:	18db      	adds	r3, r3, r3
 800330c:	eb44 0404 	adc.w	r4, r4, r4
 8003310:	185b      	adds	r3, r3, r1
 8003312:	eb44 0402 	adc.w	r4, r4, r2
 8003316:	00e0      	lsls	r0, r4, #3
 8003318:	6178      	str	r0, [r7, #20]
 800331a:	6978      	ldr	r0, [r7, #20]
 800331c:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8003320:	6178      	str	r0, [r7, #20]
 8003322:	00db      	lsls	r3, r3, #3
 8003324:	613b      	str	r3, [r7, #16]
 8003326:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800332a:	185d      	adds	r5, r3, r1
 800332c:	eb44 0602 	adc.w	r6, r4, r2
 8003330:	4628      	mov	r0, r5
 8003332:	4631      	mov	r1, r6
 8003334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f04f 0400 	mov.w	r4, #0
 800333c:	18db      	adds	r3, r3, r3
 800333e:	eb44 0404 	adc.w	r4, r4, r4
 8003342:	461a      	mov	r2, r3
 8003344:	4623      	mov	r3, r4
 8003346:	f7fc ff49 	bl	80001dc <__aeabi_uldivmod>
 800334a:	4603      	mov	r3, r0
 800334c:	460c      	mov	r4, r1
 800334e:	461a      	mov	r2, r3
 8003350:	4b9b      	ldr	r3, [pc, #620]	; (80035c0 <UART_SetConfig+0x35c>)
 8003352:	fba3 2302 	umull	r2, r3, r3, r2
 8003356:	095b      	lsrs	r3, r3, #5
 8003358:	011e      	lsls	r6, r3, #4
 800335a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800335c:	4619      	mov	r1, r3
 800335e:	f04f 0200 	mov.w	r2, #0
 8003362:	460b      	mov	r3, r1
 8003364:	4614      	mov	r4, r2
 8003366:	18db      	adds	r3, r3, r3
 8003368:	eb44 0404 	adc.w	r4, r4, r4
 800336c:	185b      	adds	r3, r3, r1
 800336e:	eb44 0402 	adc.w	r4, r4, r2
 8003372:	ea4f 0bc4 	mov.w	fp, r4, lsl #3
 8003376:	ea4b 7b53 	orr.w	fp, fp, r3, lsr #29
 800337a:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
 800337e:	4653      	mov	r3, sl
 8003380:	465c      	mov	r4, fp
 8003382:	eb13 0a01 	adds.w	sl, r3, r1
 8003386:	eb44 0b02 	adc.w	fp, r4, r2
 800338a:	4650      	mov	r0, sl
 800338c:	4659      	mov	r1, fp
 800338e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f04f 0400 	mov.w	r4, #0
 8003396:	18db      	adds	r3, r3, r3
 8003398:	eb44 0404 	adc.w	r4, r4, r4
 800339c:	461a      	mov	r2, r3
 800339e:	4623      	mov	r3, r4
 80033a0:	f7fc ff1c 	bl	80001dc <__aeabi_uldivmod>
 80033a4:	4603      	mov	r3, r0
 80033a6:	460c      	mov	r4, r1
 80033a8:	461a      	mov	r2, r3
 80033aa:	4b85      	ldr	r3, [pc, #532]	; (80035c0 <UART_SetConfig+0x35c>)
 80033ac:	fba3 1302 	umull	r1, r3, r3, r2
 80033b0:	095b      	lsrs	r3, r3, #5
 80033b2:	2164      	movs	r1, #100	; 0x64
 80033b4:	fb01 f303 	mul.w	r3, r1, r3
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	3332      	adds	r3, #50	; 0x32
 80033be:	4a80      	ldr	r2, [pc, #512]	; (80035c0 <UART_SetConfig+0x35c>)
 80033c0:	fba2 2303 	umull	r2, r3, r2, r3
 80033c4:	095b      	lsrs	r3, r3, #5
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80033cc:	441e      	add	r6, r3
 80033ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033d0:	4619      	mov	r1, r3
 80033d2:	f04f 0200 	mov.w	r2, #0
 80033d6:	460b      	mov	r3, r1
 80033d8:	4614      	mov	r4, r2
 80033da:	18db      	adds	r3, r3, r3
 80033dc:	eb44 0404 	adc.w	r4, r4, r4
 80033e0:	185b      	adds	r3, r3, r1
 80033e2:	eb44 0402 	adc.w	r4, r4, r2
 80033e6:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 80033ea:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 80033ee:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 80033f2:	4643      	mov	r3, r8
 80033f4:	464c      	mov	r4, r9
 80033f6:	eb13 0801 	adds.w	r8, r3, r1
 80033fa:	eb44 0902 	adc.w	r9, r4, r2
 80033fe:	4640      	mov	r0, r8
 8003400:	4649      	mov	r1, r9
 8003402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f04f 0400 	mov.w	r4, #0
 800340a:	18db      	adds	r3, r3, r3
 800340c:	eb44 0404 	adc.w	r4, r4, r4
 8003410:	461a      	mov	r2, r3
 8003412:	4623      	mov	r3, r4
 8003414:	f7fc fee2 	bl	80001dc <__aeabi_uldivmod>
 8003418:	4603      	mov	r3, r0
 800341a:	460c      	mov	r4, r1
 800341c:	461a      	mov	r2, r3
 800341e:	4b68      	ldr	r3, [pc, #416]	; (80035c0 <UART_SetConfig+0x35c>)
 8003420:	fba3 1302 	umull	r1, r3, r3, r2
 8003424:	095b      	lsrs	r3, r3, #5
 8003426:	2164      	movs	r1, #100	; 0x64
 8003428:	fb01 f303 	mul.w	r3, r1, r3
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	3332      	adds	r3, #50	; 0x32
 8003432:	4a63      	ldr	r2, [pc, #396]	; (80035c0 <UART_SetConfig+0x35c>)
 8003434:	fba2 2303 	umull	r2, r3, r2, r3
 8003438:	095b      	lsrs	r3, r3, #5
 800343a:	f003 0307 	and.w	r3, r3, #7
 800343e:	4433      	add	r3, r6
 8003440:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003442:	6093      	str	r3, [r2, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003444:	e0b3      	b.n	80035ae <UART_SetConfig+0x34a>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	613b      	str	r3, [r7, #16]
 800344c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800344e:	4619      	mov	r1, r3
 8003450:	f04f 0200 	mov.w	r2, #0
 8003454:	460b      	mov	r3, r1
 8003456:	4614      	mov	r4, r2
 8003458:	18db      	adds	r3, r3, r3
 800345a:	eb44 0404 	adc.w	r4, r4, r4
 800345e:	185b      	adds	r3, r3, r1
 8003460:	eb44 0402 	adc.w	r4, r4, r2
 8003464:	00e6      	lsls	r6, r4, #3
 8003466:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
 800346a:	00dd      	lsls	r5, r3, #3
 800346c:	462b      	mov	r3, r5
 800346e:	4634      	mov	r4, r6
 8003470:	185d      	adds	r5, r3, r1
 8003472:	eb44 0602 	adc.w	r6, r4, r2
 8003476:	4628      	mov	r0, r5
 8003478:	4631      	mov	r1, r6
 800347a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f04f 0400 	mov.w	r4, #0
 8003482:	00a5      	lsls	r5, r4, #2
 8003484:	62fd      	str	r5, [r7, #44]	; 0x2c
 8003486:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8003488:	ea45 7593 	orr.w	r5, r5, r3, lsr #30
 800348c:	62fd      	str	r5, [r7, #44]	; 0x2c
 800348e:	009c      	lsls	r4, r3, #2
 8003490:	62bc      	str	r4, [r7, #40]	; 0x28
 8003492:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003496:	f7fc fea1 	bl	80001dc <__aeabi_uldivmod>
 800349a:	4603      	mov	r3, r0
 800349c:	460c      	mov	r4, r1
 800349e:	461a      	mov	r2, r3
 80034a0:	4b47      	ldr	r3, [pc, #284]	; (80035c0 <UART_SetConfig+0x35c>)
 80034a2:	fba3 1302 	umull	r1, r3, r3, r2
 80034a6:	095b      	lsrs	r3, r3, #5
 80034a8:	011d      	lsls	r5, r3, #4
 80034aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034ac:	4619      	mov	r1, r3
 80034ae:	f04f 0200 	mov.w	r2, #0
 80034b2:	460b      	mov	r3, r1
 80034b4:	4614      	mov	r4, r2
 80034b6:	18db      	adds	r3, r3, r3
 80034b8:	eb44 0404 	adc.w	r4, r4, r4
 80034bc:	185b      	adds	r3, r3, r1
 80034be:	eb44 0402 	adc.w	r4, r4, r2
 80034c2:	00e0      	lsls	r0, r4, #3
 80034c4:	60f8      	str	r0, [r7, #12]
 80034c6:	68f8      	ldr	r0, [r7, #12]
 80034c8:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 80034cc:	60f8      	str	r0, [r7, #12]
 80034ce:	00d8      	lsls	r0, r3, #3
 80034d0:	60b8      	str	r0, [r7, #8]
 80034d2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80034d6:	eb13 0801 	adds.w	r8, r3, r1
 80034da:	eb44 0902 	adc.w	r9, r4, r2
 80034de:	4640      	mov	r0, r8
 80034e0:	4649      	mov	r1, r9
 80034e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f04f 0400 	mov.w	r4, #0
 80034ea:	00a6      	lsls	r6, r4, #2
 80034ec:	627e      	str	r6, [r7, #36]	; 0x24
 80034ee:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 80034f0:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 80034f4:	627e      	str	r6, [r7, #36]	; 0x24
 80034f6:	009c      	lsls	r4, r3, #2
 80034f8:	623c      	str	r4, [r7, #32]
 80034fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80034fe:	f7fc fe6d 	bl	80001dc <__aeabi_uldivmod>
 8003502:	4603      	mov	r3, r0
 8003504:	460c      	mov	r4, r1
 8003506:	461a      	mov	r2, r3
 8003508:	4b2d      	ldr	r3, [pc, #180]	; (80035c0 <UART_SetConfig+0x35c>)
 800350a:	fba3 1302 	umull	r1, r3, r3, r2
 800350e:	095b      	lsrs	r3, r3, #5
 8003510:	2164      	movs	r1, #100	; 0x64
 8003512:	fb01 f303 	mul.w	r3, r1, r3
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	011b      	lsls	r3, r3, #4
 800351a:	3332      	adds	r3, #50	; 0x32
 800351c:	4a28      	ldr	r2, [pc, #160]	; (80035c0 <UART_SetConfig+0x35c>)
 800351e:	fba2 1303 	umull	r1, r3, r2, r3
 8003522:	095b      	lsrs	r3, r3, #5
 8003524:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003528:	441d      	add	r5, r3
 800352a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800352c:	4619      	mov	r1, r3
 800352e:	f04f 0200 	mov.w	r2, #0
 8003532:	460b      	mov	r3, r1
 8003534:	4614      	mov	r4, r2
 8003536:	18db      	adds	r3, r3, r3
 8003538:	eb44 0404 	adc.w	r4, r4, r4
 800353c:	185b      	adds	r3, r3, r1
 800353e:	eb44 0402 	adc.w	r4, r4, r2
 8003542:	00e0      	lsls	r0, r4, #3
 8003544:	6078      	str	r0, [r7, #4]
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 800354c:	6078      	str	r0, [r7, #4]
 800354e:	00d8      	lsls	r0, r3, #3
 8003550:	6038      	str	r0, [r7, #0]
 8003552:	e897 0018 	ldmia.w	r7, {r3, r4}
 8003556:	eb13 0801 	adds.w	r8, r3, r1
 800355a:	eb44 0902 	adc.w	r9, r4, r2
 800355e:	4640      	mov	r0, r8
 8003560:	4649      	mov	r1, r9
 8003562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f04f 0400 	mov.w	r4, #0
 800356a:	00a6      	lsls	r6, r4, #2
 800356c:	61fe      	str	r6, [r7, #28]
 800356e:	69fe      	ldr	r6, [r7, #28]
 8003570:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 8003574:	61fe      	str	r6, [r7, #28]
 8003576:	009c      	lsls	r4, r3, #2
 8003578:	61bc      	str	r4, [r7, #24]
 800357a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800357e:	f7fc fe2d 	bl	80001dc <__aeabi_uldivmod>
 8003582:	4603      	mov	r3, r0
 8003584:	460c      	mov	r4, r1
 8003586:	461a      	mov	r2, r3
 8003588:	4b0d      	ldr	r3, [pc, #52]	; (80035c0 <UART_SetConfig+0x35c>)
 800358a:	fba3 1302 	umull	r1, r3, r3, r2
 800358e:	095b      	lsrs	r3, r3, #5
 8003590:	2164      	movs	r1, #100	; 0x64
 8003592:	fb01 f303 	mul.w	r3, r1, r3
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	011b      	lsls	r3, r3, #4
 800359a:	3332      	adds	r3, #50	; 0x32
 800359c:	4a08      	ldr	r2, [pc, #32]	; (80035c0 <UART_SetConfig+0x35c>)
 800359e:	fba2 1303 	umull	r1, r3, r2, r3
 80035a2:	095b      	lsrs	r3, r3, #5
 80035a4:	f003 030f 	and.w	r3, r3, #15
 80035a8:	442b      	add	r3, r5
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	6093      	str	r3, [r2, #8]
}
 80035ae:	bf00      	nop
 80035b0:	3744      	adds	r7, #68	; 0x44
 80035b2:	46bd      	mov	sp, r7
 80035b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035b8:	40011000 	.word	0x40011000
 80035bc:	40011400 	.word	0x40011400
 80035c0:	51eb851f 	.word	0x51eb851f

080035c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80035c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80035fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80035c8:	480d      	ldr	r0, [pc, #52]	; (8003600 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80035ca:	490e      	ldr	r1, [pc, #56]	; (8003604 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80035cc:	4a0e      	ldr	r2, [pc, #56]	; (8003608 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80035ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035d0:	e002      	b.n	80035d8 <LoopCopyDataInit>

080035d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035d6:	3304      	adds	r3, #4

080035d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035dc:	d3f9      	bcc.n	80035d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035de:	4a0b      	ldr	r2, [pc, #44]	; (800360c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80035e0:	4c0b      	ldr	r4, [pc, #44]	; (8003610 <LoopFillZerobss+0x26>)
  movs r3, #0
 80035e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035e4:	e001      	b.n	80035ea <LoopFillZerobss>

080035e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035e8:	3204      	adds	r2, #4

080035ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035ec:	d3fb      	bcc.n	80035e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80035ee:	f7fd fa21 	bl	8000a34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80035f2:	f000 f81b 	bl	800362c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80035f6:	f7fd f8e3 	bl	80007c0 <main>
  bx  lr    
 80035fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80035fc:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8003600:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003604:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8003608:	08003b40 	.word	0x08003b40
  ldr r2, =_sbss
 800360c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8003610:	200002d8 	.word	0x200002d8

08003614 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003614:	e7fe      	b.n	8003614 <ADC_IRQHandler>

08003616 <atoi>:
 8003616:	220a      	movs	r2, #10
 8003618:	2100      	movs	r1, #0
 800361a:	f000 b91d 	b.w	8003858 <strtol>
	...

08003620 <__errno>:
 8003620:	4b01      	ldr	r3, [pc, #4]	; (8003628 <__errno+0x8>)
 8003622:	6818      	ldr	r0, [r3, #0]
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	2000000c 	.word	0x2000000c

0800362c <__libc_init_array>:
 800362c:	b570      	push	{r4, r5, r6, lr}
 800362e:	4e0d      	ldr	r6, [pc, #52]	; (8003664 <__libc_init_array+0x38>)
 8003630:	4c0d      	ldr	r4, [pc, #52]	; (8003668 <__libc_init_array+0x3c>)
 8003632:	1ba4      	subs	r4, r4, r6
 8003634:	10a4      	asrs	r4, r4, #2
 8003636:	2500      	movs	r5, #0
 8003638:	42a5      	cmp	r5, r4
 800363a:	d109      	bne.n	8003650 <__libc_init_array+0x24>
 800363c:	4e0b      	ldr	r6, [pc, #44]	; (800366c <__libc_init_array+0x40>)
 800363e:	4c0c      	ldr	r4, [pc, #48]	; (8003670 <__libc_init_array+0x44>)
 8003640:	f000 f9bc 	bl	80039bc <_init>
 8003644:	1ba4      	subs	r4, r4, r6
 8003646:	10a4      	asrs	r4, r4, #2
 8003648:	2500      	movs	r5, #0
 800364a:	42a5      	cmp	r5, r4
 800364c:	d105      	bne.n	800365a <__libc_init_array+0x2e>
 800364e:	bd70      	pop	{r4, r5, r6, pc}
 8003650:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003654:	4798      	blx	r3
 8003656:	3501      	adds	r5, #1
 8003658:	e7ee      	b.n	8003638 <__libc_init_array+0xc>
 800365a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800365e:	4798      	blx	r3
 8003660:	3501      	adds	r5, #1
 8003662:	e7f2      	b.n	800364a <__libc_init_array+0x1e>
 8003664:	08003b38 	.word	0x08003b38
 8003668:	08003b38 	.word	0x08003b38
 800366c:	08003b38 	.word	0x08003b38
 8003670:	08003b3c 	.word	0x08003b3c

08003674 <memset>:
 8003674:	4402      	add	r2, r0
 8003676:	4603      	mov	r3, r0
 8003678:	4293      	cmp	r3, r2
 800367a:	d100      	bne.n	800367e <memset+0xa>
 800367c:	4770      	bx	lr
 800367e:	f803 1b01 	strb.w	r1, [r3], #1
 8003682:	e7f9      	b.n	8003678 <memset+0x4>

08003684 <strchr>:
 8003684:	b2c9      	uxtb	r1, r1
 8003686:	4603      	mov	r3, r0
 8003688:	f810 2b01 	ldrb.w	r2, [r0], #1
 800368c:	b11a      	cbz	r2, 8003696 <strchr+0x12>
 800368e:	4291      	cmp	r1, r2
 8003690:	d1f9      	bne.n	8003686 <strchr+0x2>
 8003692:	4618      	mov	r0, r3
 8003694:	4770      	bx	lr
 8003696:	2900      	cmp	r1, #0
 8003698:	bf0c      	ite	eq
 800369a:	4618      	moveq	r0, r3
 800369c:	2000      	movne	r0, #0
 800369e:	4770      	bx	lr

080036a0 <strcpy>:
 80036a0:	4603      	mov	r3, r0
 80036a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80036a6:	f803 2b01 	strb.w	r2, [r3], #1
 80036aa:	2a00      	cmp	r2, #0
 80036ac:	d1f9      	bne.n	80036a2 <strcpy+0x2>
 80036ae:	4770      	bx	lr

080036b0 <strtok>:
 80036b0:	4b13      	ldr	r3, [pc, #76]	; (8003700 <strtok+0x50>)
 80036b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036b6:	681d      	ldr	r5, [r3, #0]
 80036b8:	6dac      	ldr	r4, [r5, #88]	; 0x58
 80036ba:	4606      	mov	r6, r0
 80036bc:	460f      	mov	r7, r1
 80036be:	b9b4      	cbnz	r4, 80036ee <strtok+0x3e>
 80036c0:	2050      	movs	r0, #80	; 0x50
 80036c2:	f000 f8e3 	bl	800388c <malloc>
 80036c6:	65a8      	str	r0, [r5, #88]	; 0x58
 80036c8:	6004      	str	r4, [r0, #0]
 80036ca:	6044      	str	r4, [r0, #4]
 80036cc:	6084      	str	r4, [r0, #8]
 80036ce:	60c4      	str	r4, [r0, #12]
 80036d0:	6104      	str	r4, [r0, #16]
 80036d2:	6144      	str	r4, [r0, #20]
 80036d4:	6184      	str	r4, [r0, #24]
 80036d6:	6284      	str	r4, [r0, #40]	; 0x28
 80036d8:	62c4      	str	r4, [r0, #44]	; 0x2c
 80036da:	6304      	str	r4, [r0, #48]	; 0x30
 80036dc:	6344      	str	r4, [r0, #52]	; 0x34
 80036de:	6384      	str	r4, [r0, #56]	; 0x38
 80036e0:	63c4      	str	r4, [r0, #60]	; 0x3c
 80036e2:	6404      	str	r4, [r0, #64]	; 0x40
 80036e4:	6444      	str	r4, [r0, #68]	; 0x44
 80036e6:	6484      	str	r4, [r0, #72]	; 0x48
 80036e8:	64c4      	str	r4, [r0, #76]	; 0x4c
 80036ea:	7704      	strb	r4, [r0, #28]
 80036ec:	6244      	str	r4, [r0, #36]	; 0x24
 80036ee:	6daa      	ldr	r2, [r5, #88]	; 0x58
 80036f0:	4639      	mov	r1, r7
 80036f2:	4630      	mov	r0, r6
 80036f4:	2301      	movs	r3, #1
 80036f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80036fa:	f000 b803 	b.w	8003704 <__strtok_r>
 80036fe:	bf00      	nop
 8003700:	2000000c 	.word	0x2000000c

08003704 <__strtok_r>:
 8003704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003706:	b918      	cbnz	r0, 8003710 <__strtok_r+0xc>
 8003708:	6810      	ldr	r0, [r2, #0]
 800370a:	b908      	cbnz	r0, 8003710 <__strtok_r+0xc>
 800370c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800370e:	4620      	mov	r0, r4
 8003710:	4604      	mov	r4, r0
 8003712:	460f      	mov	r7, r1
 8003714:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003718:	f817 6b01 	ldrb.w	r6, [r7], #1
 800371c:	b91e      	cbnz	r6, 8003726 <__strtok_r+0x22>
 800371e:	b965      	cbnz	r5, 800373a <__strtok_r+0x36>
 8003720:	6015      	str	r5, [r2, #0]
 8003722:	4628      	mov	r0, r5
 8003724:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003726:	42b5      	cmp	r5, r6
 8003728:	d1f6      	bne.n	8003718 <__strtok_r+0x14>
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1ef      	bne.n	800370e <__strtok_r+0xa>
 800372e:	6014      	str	r4, [r2, #0]
 8003730:	7003      	strb	r3, [r0, #0]
 8003732:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003734:	461c      	mov	r4, r3
 8003736:	e00c      	b.n	8003752 <__strtok_r+0x4e>
 8003738:	b915      	cbnz	r5, 8003740 <__strtok_r+0x3c>
 800373a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800373e:	460e      	mov	r6, r1
 8003740:	f816 5b01 	ldrb.w	r5, [r6], #1
 8003744:	42ab      	cmp	r3, r5
 8003746:	d1f7      	bne.n	8003738 <__strtok_r+0x34>
 8003748:	2b00      	cmp	r3, #0
 800374a:	d0f3      	beq.n	8003734 <__strtok_r+0x30>
 800374c:	2300      	movs	r3, #0
 800374e:	f804 3c01 	strb.w	r3, [r4, #-1]
 8003752:	6014      	str	r4, [r2, #0]
 8003754:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003756 <_strtol_l.isra.0>:
 8003756:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800375a:	4680      	mov	r8, r0
 800375c:	4689      	mov	r9, r1
 800375e:	4692      	mov	sl, r2
 8003760:	461f      	mov	r7, r3
 8003762:	468b      	mov	fp, r1
 8003764:	465d      	mov	r5, fp
 8003766:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003768:	f815 4b01 	ldrb.w	r4, [r5], #1
 800376c:	f000 f88a 	bl	8003884 <__locale_ctype_ptr_l>
 8003770:	4420      	add	r0, r4
 8003772:	7846      	ldrb	r6, [r0, #1]
 8003774:	f016 0608 	ands.w	r6, r6, #8
 8003778:	d10b      	bne.n	8003792 <_strtol_l.isra.0+0x3c>
 800377a:	2c2d      	cmp	r4, #45	; 0x2d
 800377c:	d10b      	bne.n	8003796 <_strtol_l.isra.0+0x40>
 800377e:	782c      	ldrb	r4, [r5, #0]
 8003780:	2601      	movs	r6, #1
 8003782:	f10b 0502 	add.w	r5, fp, #2
 8003786:	b167      	cbz	r7, 80037a2 <_strtol_l.isra.0+0x4c>
 8003788:	2f10      	cmp	r7, #16
 800378a:	d114      	bne.n	80037b6 <_strtol_l.isra.0+0x60>
 800378c:	2c30      	cmp	r4, #48	; 0x30
 800378e:	d00a      	beq.n	80037a6 <_strtol_l.isra.0+0x50>
 8003790:	e011      	b.n	80037b6 <_strtol_l.isra.0+0x60>
 8003792:	46ab      	mov	fp, r5
 8003794:	e7e6      	b.n	8003764 <_strtol_l.isra.0+0xe>
 8003796:	2c2b      	cmp	r4, #43	; 0x2b
 8003798:	bf04      	itt	eq
 800379a:	782c      	ldrbeq	r4, [r5, #0]
 800379c:	f10b 0502 	addeq.w	r5, fp, #2
 80037a0:	e7f1      	b.n	8003786 <_strtol_l.isra.0+0x30>
 80037a2:	2c30      	cmp	r4, #48	; 0x30
 80037a4:	d127      	bne.n	80037f6 <_strtol_l.isra.0+0xa0>
 80037a6:	782b      	ldrb	r3, [r5, #0]
 80037a8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80037ac:	2b58      	cmp	r3, #88	; 0x58
 80037ae:	d14b      	bne.n	8003848 <_strtol_l.isra.0+0xf2>
 80037b0:	786c      	ldrb	r4, [r5, #1]
 80037b2:	2710      	movs	r7, #16
 80037b4:	3502      	adds	r5, #2
 80037b6:	2e00      	cmp	r6, #0
 80037b8:	bf0c      	ite	eq
 80037ba:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80037be:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80037c2:	2200      	movs	r2, #0
 80037c4:	fbb1 fef7 	udiv	lr, r1, r7
 80037c8:	4610      	mov	r0, r2
 80037ca:	fb07 1c1e 	mls	ip, r7, lr, r1
 80037ce:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80037d2:	2b09      	cmp	r3, #9
 80037d4:	d811      	bhi.n	80037fa <_strtol_l.isra.0+0xa4>
 80037d6:	461c      	mov	r4, r3
 80037d8:	42a7      	cmp	r7, r4
 80037da:	dd1d      	ble.n	8003818 <_strtol_l.isra.0+0xc2>
 80037dc:	1c53      	adds	r3, r2, #1
 80037de:	d007      	beq.n	80037f0 <_strtol_l.isra.0+0x9a>
 80037e0:	4586      	cmp	lr, r0
 80037e2:	d316      	bcc.n	8003812 <_strtol_l.isra.0+0xbc>
 80037e4:	d101      	bne.n	80037ea <_strtol_l.isra.0+0x94>
 80037e6:	45a4      	cmp	ip, r4
 80037e8:	db13      	blt.n	8003812 <_strtol_l.isra.0+0xbc>
 80037ea:	fb00 4007 	mla	r0, r0, r7, r4
 80037ee:	2201      	movs	r2, #1
 80037f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80037f4:	e7eb      	b.n	80037ce <_strtol_l.isra.0+0x78>
 80037f6:	270a      	movs	r7, #10
 80037f8:	e7dd      	b.n	80037b6 <_strtol_l.isra.0+0x60>
 80037fa:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80037fe:	2b19      	cmp	r3, #25
 8003800:	d801      	bhi.n	8003806 <_strtol_l.isra.0+0xb0>
 8003802:	3c37      	subs	r4, #55	; 0x37
 8003804:	e7e8      	b.n	80037d8 <_strtol_l.isra.0+0x82>
 8003806:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800380a:	2b19      	cmp	r3, #25
 800380c:	d804      	bhi.n	8003818 <_strtol_l.isra.0+0xc2>
 800380e:	3c57      	subs	r4, #87	; 0x57
 8003810:	e7e2      	b.n	80037d8 <_strtol_l.isra.0+0x82>
 8003812:	f04f 32ff 	mov.w	r2, #4294967295
 8003816:	e7eb      	b.n	80037f0 <_strtol_l.isra.0+0x9a>
 8003818:	1c53      	adds	r3, r2, #1
 800381a:	d108      	bne.n	800382e <_strtol_l.isra.0+0xd8>
 800381c:	2322      	movs	r3, #34	; 0x22
 800381e:	f8c8 3000 	str.w	r3, [r8]
 8003822:	4608      	mov	r0, r1
 8003824:	f1ba 0f00 	cmp.w	sl, #0
 8003828:	d107      	bne.n	800383a <_strtol_l.isra.0+0xe4>
 800382a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800382e:	b106      	cbz	r6, 8003832 <_strtol_l.isra.0+0xdc>
 8003830:	4240      	negs	r0, r0
 8003832:	f1ba 0f00 	cmp.w	sl, #0
 8003836:	d00c      	beq.n	8003852 <_strtol_l.isra.0+0xfc>
 8003838:	b122      	cbz	r2, 8003844 <_strtol_l.isra.0+0xee>
 800383a:	3d01      	subs	r5, #1
 800383c:	f8ca 5000 	str.w	r5, [sl]
 8003840:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003844:	464d      	mov	r5, r9
 8003846:	e7f9      	b.n	800383c <_strtol_l.isra.0+0xe6>
 8003848:	2430      	movs	r4, #48	; 0x30
 800384a:	2f00      	cmp	r7, #0
 800384c:	d1b3      	bne.n	80037b6 <_strtol_l.isra.0+0x60>
 800384e:	2708      	movs	r7, #8
 8003850:	e7b1      	b.n	80037b6 <_strtol_l.isra.0+0x60>
 8003852:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08003858 <strtol>:
 8003858:	4b08      	ldr	r3, [pc, #32]	; (800387c <strtol+0x24>)
 800385a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800385c:	681c      	ldr	r4, [r3, #0]
 800385e:	4d08      	ldr	r5, [pc, #32]	; (8003880 <strtol+0x28>)
 8003860:	6a23      	ldr	r3, [r4, #32]
 8003862:	2b00      	cmp	r3, #0
 8003864:	bf08      	it	eq
 8003866:	462b      	moveq	r3, r5
 8003868:	9300      	str	r3, [sp, #0]
 800386a:	4613      	mov	r3, r2
 800386c:	460a      	mov	r2, r1
 800386e:	4601      	mov	r1, r0
 8003870:	4620      	mov	r0, r4
 8003872:	f7ff ff70 	bl	8003756 <_strtol_l.isra.0>
 8003876:	b003      	add	sp, #12
 8003878:	bd30      	pop	{r4, r5, pc}
 800387a:	bf00      	nop
 800387c:	2000000c 	.word	0x2000000c
 8003880:	20000070 	.word	0x20000070

08003884 <__locale_ctype_ptr_l>:
 8003884:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8003888:	4770      	bx	lr
	...

0800388c <malloc>:
 800388c:	4b02      	ldr	r3, [pc, #8]	; (8003898 <malloc+0xc>)
 800388e:	4601      	mov	r1, r0
 8003890:	6818      	ldr	r0, [r3, #0]
 8003892:	f000 b815 	b.w	80038c0 <_malloc_r>
 8003896:	bf00      	nop
 8003898:	2000000c 	.word	0x2000000c

0800389c <__ascii_mbtowc>:
 800389c:	b082      	sub	sp, #8
 800389e:	b901      	cbnz	r1, 80038a2 <__ascii_mbtowc+0x6>
 80038a0:	a901      	add	r1, sp, #4
 80038a2:	b142      	cbz	r2, 80038b6 <__ascii_mbtowc+0x1a>
 80038a4:	b14b      	cbz	r3, 80038ba <__ascii_mbtowc+0x1e>
 80038a6:	7813      	ldrb	r3, [r2, #0]
 80038a8:	600b      	str	r3, [r1, #0]
 80038aa:	7812      	ldrb	r2, [r2, #0]
 80038ac:	1c10      	adds	r0, r2, #0
 80038ae:	bf18      	it	ne
 80038b0:	2001      	movne	r0, #1
 80038b2:	b002      	add	sp, #8
 80038b4:	4770      	bx	lr
 80038b6:	4610      	mov	r0, r2
 80038b8:	e7fb      	b.n	80038b2 <__ascii_mbtowc+0x16>
 80038ba:	f06f 0001 	mvn.w	r0, #1
 80038be:	e7f8      	b.n	80038b2 <__ascii_mbtowc+0x16>

080038c0 <_malloc_r>:
 80038c0:	b570      	push	{r4, r5, r6, lr}
 80038c2:	1ccd      	adds	r5, r1, #3
 80038c4:	f025 0503 	bic.w	r5, r5, #3
 80038c8:	3508      	adds	r5, #8
 80038ca:	2d0c      	cmp	r5, #12
 80038cc:	bf38      	it	cc
 80038ce:	250c      	movcc	r5, #12
 80038d0:	2d00      	cmp	r5, #0
 80038d2:	4606      	mov	r6, r0
 80038d4:	db01      	blt.n	80038da <_malloc_r+0x1a>
 80038d6:	42a9      	cmp	r1, r5
 80038d8:	d903      	bls.n	80038e2 <_malloc_r+0x22>
 80038da:	230c      	movs	r3, #12
 80038dc:	6033      	str	r3, [r6, #0]
 80038de:	2000      	movs	r0, #0
 80038e0:	bd70      	pop	{r4, r5, r6, pc}
 80038e2:	f000 f868 	bl	80039b6 <__malloc_lock>
 80038e6:	4a23      	ldr	r2, [pc, #140]	; (8003974 <_malloc_r+0xb4>)
 80038e8:	6814      	ldr	r4, [r2, #0]
 80038ea:	4621      	mov	r1, r4
 80038ec:	b991      	cbnz	r1, 8003914 <_malloc_r+0x54>
 80038ee:	4c22      	ldr	r4, [pc, #136]	; (8003978 <_malloc_r+0xb8>)
 80038f0:	6823      	ldr	r3, [r4, #0]
 80038f2:	b91b      	cbnz	r3, 80038fc <_malloc_r+0x3c>
 80038f4:	4630      	mov	r0, r6
 80038f6:	f000 f841 	bl	800397c <_sbrk_r>
 80038fa:	6020      	str	r0, [r4, #0]
 80038fc:	4629      	mov	r1, r5
 80038fe:	4630      	mov	r0, r6
 8003900:	f000 f83c 	bl	800397c <_sbrk_r>
 8003904:	1c43      	adds	r3, r0, #1
 8003906:	d126      	bne.n	8003956 <_malloc_r+0x96>
 8003908:	230c      	movs	r3, #12
 800390a:	6033      	str	r3, [r6, #0]
 800390c:	4630      	mov	r0, r6
 800390e:	f000 f853 	bl	80039b8 <__malloc_unlock>
 8003912:	e7e4      	b.n	80038de <_malloc_r+0x1e>
 8003914:	680b      	ldr	r3, [r1, #0]
 8003916:	1b5b      	subs	r3, r3, r5
 8003918:	d41a      	bmi.n	8003950 <_malloc_r+0x90>
 800391a:	2b0b      	cmp	r3, #11
 800391c:	d90f      	bls.n	800393e <_malloc_r+0x7e>
 800391e:	600b      	str	r3, [r1, #0]
 8003920:	50cd      	str	r5, [r1, r3]
 8003922:	18cc      	adds	r4, r1, r3
 8003924:	4630      	mov	r0, r6
 8003926:	f000 f847 	bl	80039b8 <__malloc_unlock>
 800392a:	f104 000b 	add.w	r0, r4, #11
 800392e:	1d23      	adds	r3, r4, #4
 8003930:	f020 0007 	bic.w	r0, r0, #7
 8003934:	1ac3      	subs	r3, r0, r3
 8003936:	d01b      	beq.n	8003970 <_malloc_r+0xb0>
 8003938:	425a      	negs	r2, r3
 800393a:	50e2      	str	r2, [r4, r3]
 800393c:	bd70      	pop	{r4, r5, r6, pc}
 800393e:	428c      	cmp	r4, r1
 8003940:	bf0d      	iteet	eq
 8003942:	6863      	ldreq	r3, [r4, #4]
 8003944:	684b      	ldrne	r3, [r1, #4]
 8003946:	6063      	strne	r3, [r4, #4]
 8003948:	6013      	streq	r3, [r2, #0]
 800394a:	bf18      	it	ne
 800394c:	460c      	movne	r4, r1
 800394e:	e7e9      	b.n	8003924 <_malloc_r+0x64>
 8003950:	460c      	mov	r4, r1
 8003952:	6849      	ldr	r1, [r1, #4]
 8003954:	e7ca      	b.n	80038ec <_malloc_r+0x2c>
 8003956:	1cc4      	adds	r4, r0, #3
 8003958:	f024 0403 	bic.w	r4, r4, #3
 800395c:	42a0      	cmp	r0, r4
 800395e:	d005      	beq.n	800396c <_malloc_r+0xac>
 8003960:	1a21      	subs	r1, r4, r0
 8003962:	4630      	mov	r0, r6
 8003964:	f000 f80a 	bl	800397c <_sbrk_r>
 8003968:	3001      	adds	r0, #1
 800396a:	d0cd      	beq.n	8003908 <_malloc_r+0x48>
 800396c:	6025      	str	r5, [r4, #0]
 800396e:	e7d9      	b.n	8003924 <_malloc_r+0x64>
 8003970:	bd70      	pop	{r4, r5, r6, pc}
 8003972:	bf00      	nop
 8003974:	200001fc 	.word	0x200001fc
 8003978:	20000200 	.word	0x20000200

0800397c <_sbrk_r>:
 800397c:	b538      	push	{r3, r4, r5, lr}
 800397e:	4c06      	ldr	r4, [pc, #24]	; (8003998 <_sbrk_r+0x1c>)
 8003980:	2300      	movs	r3, #0
 8003982:	4605      	mov	r5, r0
 8003984:	4608      	mov	r0, r1
 8003986:	6023      	str	r3, [r4, #0]
 8003988:	f7fd f828 	bl	80009dc <_sbrk>
 800398c:	1c43      	adds	r3, r0, #1
 800398e:	d102      	bne.n	8003996 <_sbrk_r+0x1a>
 8003990:	6823      	ldr	r3, [r4, #0]
 8003992:	b103      	cbz	r3, 8003996 <_sbrk_r+0x1a>
 8003994:	602b      	str	r3, [r5, #0]
 8003996:	bd38      	pop	{r3, r4, r5, pc}
 8003998:	200002d4 	.word	0x200002d4

0800399c <__ascii_wctomb>:
 800399c:	b149      	cbz	r1, 80039b2 <__ascii_wctomb+0x16>
 800399e:	2aff      	cmp	r2, #255	; 0xff
 80039a0:	bf85      	ittet	hi
 80039a2:	238a      	movhi	r3, #138	; 0x8a
 80039a4:	6003      	strhi	r3, [r0, #0]
 80039a6:	700a      	strbls	r2, [r1, #0]
 80039a8:	f04f 30ff 	movhi.w	r0, #4294967295
 80039ac:	bf98      	it	ls
 80039ae:	2001      	movls	r0, #1
 80039b0:	4770      	bx	lr
 80039b2:	4608      	mov	r0, r1
 80039b4:	4770      	bx	lr

080039b6 <__malloc_lock>:
 80039b6:	4770      	bx	lr

080039b8 <__malloc_unlock>:
 80039b8:	4770      	bx	lr
	...

080039bc <_init>:
 80039bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039be:	bf00      	nop
 80039c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039c2:	bc08      	pop	{r3}
 80039c4:	469e      	mov	lr, r3
 80039c6:	4770      	bx	lr

080039c8 <_fini>:
 80039c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ca:	bf00      	nop
 80039cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ce:	bc08      	pop	{r3}
 80039d0:	469e      	mov	lr, r3
 80039d2:	4770      	bx	lr
